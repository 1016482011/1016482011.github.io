<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>EventDispatcher</title>
    <url>/2019/03/20/EventDispatcher/</url>
    <content><![CDATA[<p>最近在<a href="https://github.com/mrdoob/eventdispatcher.js/" target="_blank" rel="noopener">git</a>上看到一个事件分发的小插件，个人觉得非常有用。</p>
<p>源代码如下：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> EventDispatcher &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._listeners = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> _listeners: &#123; [<span class="keyword">type</span>: <span class="built_in">string</span>]: <span class="built_in">Array</span>&lt;<span class="function">(<span class="params">event: Event</span>) =&gt;</span> <span class="built_in">void</span>&gt; &#125;</span><br><span class="line">  addEventListener(<span class="keyword">type</span>, listener) &#123;</span><br><span class="line">    <span class="keyword">const</span> listeners = <span class="keyword">this</span>._listeners</span><br><span class="line">    <span class="keyword">if</span> (listeners[<span class="keyword">type</span>] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      listeners[<span class="keyword">type</span>] = []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (listeners[<span class="keyword">type</span>].indexOf(listener) === <span class="number">-1</span>) &#123;</span><br><span class="line">      listeners[<span class="keyword">type</span>].push(listener)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hasEventListener(<span class="keyword">type</span>, listener) &#123;</span><br><span class="line">    <span class="keyword">const</span> listeners = <span class="keyword">this</span>._listeners</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      listeners[<span class="keyword">type</span>] !== <span class="literal">undefined</span> &amp;&amp; listeners[<span class="keyword">type</span>].indexOf(listener) !== <span class="number">-1</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeEventListener(<span class="keyword">type</span>, listener) &#123;</span><br><span class="line">    <span class="keyword">const</span> listeners = <span class="keyword">this</span>._listeners</span><br><span class="line">    <span class="keyword">const</span> listenerArray = listeners[<span class="keyword">type</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (listenerArray !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> index = listenerArray.indexOf(listener)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (index !== <span class="number">-1</span>) &#123;</span><br><span class="line">        listenerArray.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dispatchEvent(event) &#123;</span><br><span class="line">    <span class="keyword">const</span> listeners = <span class="keyword">this</span>._listeners</span><br><span class="line">    <span class="keyword">const</span> listenerArray = listeners[event.type]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (listenerArray !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      event.target = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> array = listenerArray.slice(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = array.length; i &lt; l; i++) &#123;</span><br><span class="line">        array[i].call(<span class="keyword">this</span>, event)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源代码实现的很精简</p>
<ul>
<li><code>addEventListener</code>：绑定事件，<code>type</code>为事件类型，<code>listener</code>为事件回调函数。</li>
<li><code>hasEventListener</code>：检查指定类型的回调函数是否存在。</li>
<li><code>removeEventListener</code>：删除指定事件类型下的函数。</li>
<li><code>dispatchEvent</code>：触发指定类型的事件，<code>event</code>为传给事件回调函数的参数。</li>
</ul>
<p>其用法也比较简单，如下是实际项目中使用代码：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Measure &#125; <span class="keyword">from</span> <span class="string">'./tools'</span></span><br><span class="line"><span class="keyword">class</span> ModelTool <span class="keyword">extends</span> EventDispatcher &#123;</span><br><span class="line">  <span class="keyword">static</span> Measure = Measure</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">el: HTMLDivElement | <span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.core = <span class="keyword">new</span> Core(el)</span><br><span class="line">    <span class="keyword">this</span>.eventBind()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> eventBind() &#123;</span><br><span class="line">    <span class="keyword">this</span>.core.el.addEventListener(</span><br><span class="line">      <span class="string">'click'</span>,</span><br><span class="line">      e =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> intersection = <span class="keyword">this</span>.core.getFirstIntersection(</span><br><span class="line">          e.clientX,</span><br><span class="line">          e.clientY</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">this</span>.dispatchEvent(&#123; <span class="keyword">type</span>: <span class="string">'click'</span>, event: e, intersection &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> core: Core</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> use = &lt;T <span class="keyword">extends</span> Tool&gt;(tool: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">    tool.core = <span class="keyword">this</span>.core</span><br><span class="line">    <span class="keyword">if</span> (!_.isNull(tool.action)) <span class="keyword">this</span>.addEventListener(<span class="string">'click'</span>, tool.action)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tool</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> remove = <span class="function">(<span class="params">tool: Tool</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_.isNull(tool.action)) <span class="keyword">this</span>.removeEventListener(<span class="string">'click'</span>, tool.action)</span><br><span class="line">    tool.core = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>eventBind</code>函数中，将<code>dom(el)</code>的事件进行了绑定，并在点击时分发类型为<code>click</code>的函数。</p>
<p><code>use</code>函数是一个用来初始化插件的函数，并且会自动将插件内的函数绑定到点击事件之下。</p>
<p><code>remove</code>是一个清除插件的函数，将插件的点击事件注销。</p>
<p>假设<code>Measure</code>函数如下：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Measure &#123;</span><br><span class="line">  <span class="keyword">public</span> core: Core | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> action: <span class="function">(<span class="params">e: ClickEvent</span>) =&gt;</span> <span class="built_in">void</span> = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.intersection)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> modeltool = <span class="keyword">new</span> ModelTool(<span class="built_in">document</span>.getElementById(<span class="string">'container'</span>))</span><br><span class="line">modelTool.use(<span class="keyword">new</span> ModelTool.Measure())</span><br></pre></td></tr></table></figure>

<p>点击 id 为<code>container</code>的元素是会打印出<code>getFirstIntersection</code>方法返回的结果。</p>
<p>当然这只是<code>EventDispatcher</code>一种使用情景，你也可以使用它来为一个<code>class</code>或者函数制定自定义函数等等。在封装一些组件中非常好用。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JS函数式编程01</title>
    <url>/2019/02/18/JS%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B01/</url>
    <content><![CDATA[<p>函数式编程在刚接触 js 的时候便听说了，16 年下半年便买了书来看，不过一直都不得甚解，现在再回过头来看看，慢慢理解</p>
<h2 id="函数式编程技术"><a href="#函数式编程技术" class="headerlink" title="函数式编程技术"></a>函数式编程技术</h2><ol>
<li>确定抽象，并为其构建函数。</li>
<li>利用已有的函数来构建更为复杂的抽象。</li>
<li>通过将现有的函数传给其他的函数来构建更加复杂的抽象。</li>
</ol>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>一个高阶函数应该可以执行下列至少一项操作：</p>
<ol>
<li>以一个函数作为参数。</li>
<li>返回一个函数作为结果。</li>
<li>他是一等公民</li>
</ol>
<h3 id="一等公民函数"><a href="#一等公民函数" class="headerlink" title="一等公民函数"></a>一等公民函数</h3><ol>
<li>可以存储在变量中。</li>
<li>可以被存储在数组中的插槽中</li>
<li>可以存储在对象的字段中</li>
<li>可以根据需要来创建</li>
<li>可以被传递到其他函数中</li>
<li>可以被其他函数</li>
</ol>
<h2 id="函数、方法"><a href="#函数、方法" class="headerlink" title="函数、方法"></a>函数、方法</h2><p>函数：独立存在的函数。 方法：在对象的上下文中创建出来的函数。</p>
<h2 id="Applicarive-编程"><a href="#Applicarive-编程" class="headerlink" title="Applicarive 编程"></a>Applicarive 编程</h2><p>函数 A 作为参数提供给函数 B，其衍生出来的集合中心编程的理念：用 100 个函数操作一个数据结构，比用 10 个函数操作 10 个数据结构要好。</p>
<h2 id="函数抽象思考"><a href="#函数抽象思考" class="headerlink" title="函数抽象思考"></a>函数抽象思考</h2><p>以 repeat 函数为例，它以一个数字和一个值为参数，将该值进行多次赋值，并放入一个数组中:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">time, VALUE</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.map(_.range(times), <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> VALUE</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">repeat(<span class="number">4</span>, <span class="string">'major'</span>)</span><br><span class="line"><span class="comment">// =&gt; ['major', 'major','major','major']</span></span><br></pre></td></tr></table></figure>

<p>将一个值重复多次是可以的，但将运算重复多次则更好，下面改进一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeatedly</span>(<span class="params">time, fun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> _.map(_.range(times), fun)</span><br><span class="line">&#125;</span><br><span class="line">repeatedly(<span class="number">3</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span> + <span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt; [1,3,8]</span></span><br></pre></td></tr></table></figure>

<p>函数<code>repeatedly</code>是展示函数式思维方式力量的一个很好的例证。通过将参数从值替换为函数，在调用端，我们可以用一个可以填充任何东西的数组来替换一个固定的值。</p>
<p>我们将一个在<code>repeat</code>中使用静态值的函数变成了一个接受函数的<code>repeatedly</code>函数，这确实使<code>repeatedly</code>更加开放，但它的通用性仍没有达到期望。我们仍需要一个确定需要调用给定的函数多少次的数值。我们常常会准确地知道函数应该被调用多少次，但有时候退出并不取决于“次数”，而是条件。我们可以定义另一个名为<code>iterateUntil</code>的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iterateUntil</span>(<span class="params">fun, check, init</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ret = []</span><br><span class="line">  <span class="keyword">var</span> result = fun(init)</span><br><span class="line">  <span class="keyword">while</span> (check(result)) &#123;</span><br><span class="line">    ret.push(result)</span><br><span class="line">    result = fun(result)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>函数<code>iterateUntil</code>接收两个函数：一个用来执行一些动作，另外一个用来结果检查，当结果满足“结束”值时返回<code>false</code>。这算得上是真正的将<code>repeatedly</code>带到一个新的水平，现在甚至连重复的次数都是开放的，受到一个函数执行结果的影响。下面是使用该函数的一个实例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">iterateUntil(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n + n</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt;= <span class="number">1024</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//=&gt; [2,4,8,16,32,64,128,256,512,1024</span></span><br></pre></td></tr></table></figure>

<p>正如你所知，在使用<code>repeatdly</code>来实现相同的功能之前，为了得到正确的结果数组，需要提前确定调用为我们的函数的次数，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">repeatedly(<span class="number">10</span>, <span class="function"><span class="keyword">function</span>(<span class="params">exp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.pow(<span class="number">2</span>, exp + <span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//=&gt; [2,4,8,16,32,64,128,256,512,102</span></span><br></pre></td></tr></table></figure>

<p>有时候，你可能知道需要计算多少次，但有时候你只知道计算何时停止。<code>iterateUntil</code>提供的另外一个优点是，循环体是一个前馈函数，即一些函数的执行结果被当做下一个函数的参数。</p>
<h2 id="返回其他函数的函数"><a href="#返回其他函数的函数" class="headerlink" title="返回其他函数的函数"></a>返回其他函数的函数</h2><p>下面函数使用了一个忽略其参数并仅仅返回一个常量的函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">repeatedly(<span class="number">3</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Odelay!'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这种返回一个常量的函数非常有用，所以几乎是函数式编程的一个设计模式，经常被简称为 k。其实现方式为下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">k</span>(<span class="params">VALUE</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> VALUE</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>k</code>的行为可以用来解释闭包的一些关键点。首先，闭包会捕获一个值，并多次返回相同的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = k(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line">f() === f</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>

<p>该函数总是产生一个确定的值。接下来用 k 来替换之前的匿名函数，会更加简洁一些：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">repeatedly(<span class="number">3</span>, k(<span class="string">'Odelay'</span>))</span><br></pre></td></tr></table></figure>

<p>像<code>k</code>这样的函数被称为组合子</p>
<h2 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h2><p>柯里化的编程思想是使用一个函数来构建一个新的函数。柯里化函数逐渐返回消耗参数的函数，直到所有的参数耗尽柯里化从右往左比较好，像 javascript 这样的语言，可以通过任意数量的参数，从右到左让你能修复可选参数的值。下面的例子可以说明参数方向选择的差异：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">letfCurryDiv</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n / d</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rightCurryDiv</span>(<span class="params">d</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n / d</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用除法运算很好的说明了柯里化方向的区别，因为结果会因为参数顺序而变化。观察 <code>letfCurryDiv</code> 函数如何柯里化参数产生结果的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divide10by = leftCurryDiv(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>函数以<code>10</code>参数<code>10</code>初始化并命名<code>divide10By</code>，该函数配置为做<code>10/?</code>操作，其中?是下次调用时最右边的参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">divide10by(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// =&gt; 5</span></span><br></pre></td></tr></table></figure>

<p>第二次调用柯里函数开始执行 10/2 操作。然而，如果使用 rightCurryDiv 函数，情况就完全不一样:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> divideBy10 = rightCurryDiv(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>现在命名为 divideBy10 的柯里函数体变化?/10，在执行前等待最左边的参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">divideBy10(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// =&gt;0.2</span></span><br></pre></td></tr></table></figure>

<p>上述用法都是手动柯里化，下面是一个自动柯里化参数的例子，这是一个简单的高阶函数，他接受一个函数，并返回一个只接收一个参数的函数，将其命名为<code>curry</code>，实现如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fun(arg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>curry</code>的操作可以概括为：接受一个函数，返回一个只接收一个参数的函数</p>
<p>这似乎是一个相当没用的函数，在许多函数式编程语言中，很少有令人信服的理由来提供一个像 curry 这样无修饰的代理，javascript 中，函数可能会接收期望之外的“特化”参数。例如：javascript 函数 parseInt 接受一个字符串并返回其相应的整数，此外其还可以接受一个可选的第二参数。</p>
<p>柯里化两参数和三参数的函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 柯里化两参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry2</span>(<span class="params">fun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">secondArg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">firstArg</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fun(firstArg, secondArg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 柯里化三参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry3</span>(<span class="params">fun</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">last</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">middle</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">first</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fun(first, middle, last)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>函数式</tag>
      </tags>
  </entry>
  <entry>
    <title>SuperTinyCompiler</title>
    <url>/2019/07/04/SuperTinyCompiler/</url>
    <content><![CDATA[<p><a href="https://the-super-tiny-compiler.glitch.me/intro" target="_blank" rel="noopener">原文</a></p>
<p>这里我们打算将一些类<code>lisp</code>函数编译成类<code>C</code>函数调用。如果你对这两者都不熟悉也没关系，转换关系如下：</p>
<table>
<thead>
<tr>
<th></th>
<th>LISP-style</th>
<th>C-style</th>
</tr>
</thead>
<tbody><tr>
<td>2+2</td>
<td>(add 2 2)</td>
<td>add(2,2)</td>
</tr>
<tr>
<td>4-2</td>
<td>(subtract 4 2)</td>
<td>subtract(4,2)</td>
</tr>
<tr>
<td>2+(4-2)</td>
<td>(add 2 (subtract 4 2))</td>
<td>add(2,subtract(4,2))</td>
</tr>
</tbody></table>
<p>大多数编译可以拆分为三步：解析、转换和代码生成。</p>
<p>解析正常可以分为两步：词法分析和语法分析。</p>
<p>词法分析将原始代码通过分词器分解成独立的符号对象。语法分析将其格式化为抽象语法树。</p>
<p>以如下代码为例：</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">(<span class="name">add</span> <span class="number">2</span> (<span class="name">subtract</span> <span class="number">4</span> <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<p>经过分词后得到数据如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;[</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'paren'</span>, <span class="attr">value</span>: <span class="string">'('</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'name'</span>, <span class="attr">value</span>: <span class="string">'add'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'number'</span>, <span class="attr">value</span>: <span class="string">'2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'paren'</span>, <span class="attr">value</span>: <span class="string">'('</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'name'</span>, <span class="attr">value</span>: <span class="string">'subtract'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'number'</span>, <span class="attr">value</span>: <span class="string">'4'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'number'</span>, <span class="attr">value</span>: <span class="string">'2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'paren'</span>, <span class="attr">value</span>: <span class="string">')'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">'paren'</span>, <span class="attr">value</span>: <span class="string">')'</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>抽象语法树格式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: <span class="string">'Program'</span>,</span><br><span class="line">  body: [&#123;</span><br><span class="line">    type: <span class="string">'CallExpression'</span>,</span><br><span class="line">    name: <span class="string">'add'</span>,</span><br><span class="line">    params: [&#123;</span><br><span class="line">      type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">      value: <span class="string">'2'</span>,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      type: <span class="string">'CallExpression'</span>,</span><br><span class="line">      name: <span class="string">'subtract'</span>,</span><br><span class="line">      params: [&#123;</span><br><span class="line">        type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">        value: <span class="string">'4'</span>,</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">        value: <span class="string">'2'</span>,</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来是转换，这一步会使用 AST 的数据来进行转换。他可以是与 AST 一样的语言结构，也可以转换成完全另一个语言。这是使用的是与 AST 一样的语言。</p>
<p>接着就是遍历转换得到的节点，采用深度优先原则。</p>
<p>以上述 AST 为例，遍历顺序如下：</p>
<ol>
<li>Program</li>
<li>CallExpression (add)</li>
<li>NumberLiteral (2)</li>
<li>CallExpression (subtract)</li>
<li>NumberLiteral (4)</li>
<li>NumberLiteral (2)</li>
</ol>
<p>最后是代码生成，一般情况下都是使用 AST 的数据结构来生成最终代码</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过了解编译步骤可以有助我了解<code>babel</code>，另一方面，在工作中，有时候我们能遇到这么一个需求，就是将指定数据结构转换成指定 dom 树来进行渲染，往后遇到类似需求时或许可以参照参照。</p>
]]></content>
      <categories>
        <category>compiler</category>
      </categories>
      <tags>
        <tag>compiler</tag>
      </tags>
  </entry>
  <entry>
    <title>JS权威指南</title>
    <url>/2019/02/26/JS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>《JS 权威指南》是我最喜爱的一本书，最早接触前端是在 2015 年（大二）年底的寒假，起初我只是单纯的对 js 在浏览器的表现感兴趣，后来通过 js 了解了 html，css，php，之后就一发不可收拾，彻底爱上了 web 这一行。</p>
<p>起初的学习比较迷茫，与前端相关的、不相关的都花时间去了解学习实践，学习初期主要是 bootstrap、jquery、thinkphp，主要是是一些当时算是比较流行的一些类库和框架，平时也会看一些网络、数据结构、数据库方面的知识。但随着时间的推移，实践的增加，越发觉得自己在解决问题的能力上很欠缺，主要是 css 和 js 上的。每次遇到一个 js 问题，我都需要去网上搜索答案，往往搜到的答案只是提供直接的解决方法，对于发生此问题的原因只有一个简短的说明，作为小白的我经常看的一脸懵逼，貌似懂了，但又不太懂。</p>
<p>一次偶尔的机会大三上学期，我在学校图书馆找书时，看到了权威指南这本书，第一眼就被它厚厚的身板吸引住了，有一千页，这让我很好奇教学视频里几个小时就能讲完的内容为何需要这么多页去讲解。在简单翻阅了几章之后，瞬间让我有种相见很晚的感觉，于是便自己在网上买了一本，看完这本书花了我不少时间，一共看了 3 遍，历时大半年，当初看的时候顿时觉得之前 js 都是白学了，当初遇到的一些问题现在回想起来也都明白了个七七八八。</p>
<p>后来在大三下学期，我再一次精读了此书的前 500 页，并把其中的内容做了摘录，并在近期发布到了 gitbook 上，其内容可通过如下地址访问：</p>
<p><a href="https://2956957982.gitbook.io/js/" target="_blank" rel="noopener">https://2956957982.gitbook.io/js/</a></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>css模块化</title>
    <url>/2019/03/06/css%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    <content><![CDATA[<p>目前主流的 css 规范大致可以分为<code>OOCSS</code>、<code>SMACSS</code>、<code>BEM</code>、<code>CSS Modules</code>、<code>CSS in JS</code></p>
<p>在以往写 css 的时候比较随意，加上平时主要精力都在<code>js</code>开发上，对 css 的写法知之甚少，但随着工作时间的增加（快一年了），发现自己一直在重复的写一些 css 代码，并且这些代码维护起来也比较困难，每次需要改一个样式时，都需要在浏览器中使用控制台的<code>Element</code>查看需要修改区域的<code>dom</code>的<code>class</code>，然后通过在<code>css</code>中进行搜索才能定位到问题样式所在。从我个人开发体验上来讲，感到明显的效率低下和维护困难。</p>
<p>后来在学习的过程中发现了<code>less</code>和<code>sass</code>，但这两个<code>css</code>的预编译框架并没有在写法上提出严格的限制，之前的问题依旧存在。</p>
<h2 id="OOCSS"><a href="#OOCSS" class="headerlink" title="OOCSS"></a>OOCSS</h2><p>全称<code>Object Oriented CSS</code>，中文为面向对象 css，其主要有两个原则：</p>
<ol>
<li><code>Separation of Structure from Skin</code> 独立的结构和样式</li>
<li><code>Separation of Containers and Content</code> 独立的容器和内容</li>
</ol>
<p>所谓结构就是元素的大小，样式指颜色等等，第二点即是指将 html 与 css 进行分离，并对 class 进行抽象剥离，我的理解就是，不要将 class 与你具体页面做关联，比如你在开发<code>home</code>页，在实现其中的导航时，class 命名不要带上<code>home</code></p>
<p><code>OOCSS</code>的典型代表为<code>Bootstrap</code>，以其<code>button</code>为例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-lg btn-block"</span>&gt;</span></span><br><span class="line">  button</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以很容易的看出，其主要分为其他几部分</p>
<ol>
<li><code>btn</code>：标准按钮样式</li>
<li><code>btn-primary</code>：按钮颜色</li>
<li><code>btn-lg</code>：按钮大小</li>
<li><code>btn-block</code>：展示为块级按钮</li>
</ol>
<p>通过不同的<code>class</code>组合，就可以形成多种按钮</p>
<p><code>OOCSS</code>的优点如下：</p>
<ol>
<li>减少 css 代码</li>
<li>html 标记简洁，逻辑性强</li>
<li>语义标记，有利于 SEO</li>
<li>由于各种 class 可重用，页面加载更快</li>
<li>拓展性强，不用担心加入的新组件会破坏原有的组件</li>
<li>有利于维护</li>
</ol>
<p>同时<code>OOCSS</code>使用时需要注意如下几点：</p>
<ol>
<li><code>OOCSS</code>主要用于大型网站开发，组件复用情况多</li>
<li><code>OOCSS</code>在整体规划上难度颇高，需要有一定的经验的积累，如果使用不当，将会毫无复用性可言，维护也将异常艰难</li>
<li>每个组件都需要一个完善的文档</li>
</ol>
<h2 id="SMACSS"><a href="#SMACSS" class="headerlink" title="SMACSS"></a>SMACSS</h2><p>了解不多，其通则为：</p>
<ol>
<li>结构分类：Base、Layout、Moudule、State、Theme</li>
<li>命名规则：id 与 class 受限制的使用，名称之间使用分隔线</li>
</ol>
<h2 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h2><p><code>BEM</code>全称<code>Block Element Modifier</code>，<code>BEM</code>吸收了<code>OOCSS</code>的优点，并将 class 分块语义化，在可读性和维护性上个人认为高于<code>OOCSS</code></p>
<p><code>BEM</code>是目前我在实际开发中使用体验最好的一个规范，由于<code>BEM</code>只是一个规范，有些部分并没有做强制要求，实际使用时我会根据自身经验和项目情况做一些调整，以当前项目使用情况为例：</p>
<p>styles 文件夹的文件可分为四块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">index.less</span><br><span class="line">lib - lay.less</span><br><span class="line">mod - modal.less</span><br><span class="line">pag - home.less</span><br></pre></td></tr></table></figure>

<p><code>lib</code>开头的是一些基础的样式或者颜色字体等变量，通用布局和样式重置等，<code>mod</code>是各个组件样式，<code>pag</code>是页面内特殊样式</p>
<p>以 modal 为例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.m-modal</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-modal__header</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-modal__body</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-modal__body--nofooter</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.m-modal__footer</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>m-modal</code>是<code>Block</code>，<code>header</code>、<code>body</code>、<code>footer</code>是<code>Element</code>，<code>nofooter</code>为<code>Modifier</code>，B 与 M 之间使用<code>__</code>分隔，E 与 M 之间使用<code>--</code>分隔，class 在命名时，最多三段，相比其他规范在保持简短的同时提供了 class 的可读性。</p>
<p>每个模块之间都是独立的，以组件进行开发，这点与<code>OOCSS</code>很像，<code>BEM</code>可复用性好。另外<code>BEM</code>是功能为导向的，每个模块代表着某个功能，不会出现<code>OOCSS</code>或者<code>SMASS</code>中像<code>.pt-20</code>(<code>padding-top:20px</code>)这种让别人看不懂的名称。</p>
<p>有关 BEM 注意事项可见<a href="https://www.smashingmagazine.com/2016/06/battling-bem-extended-edition-common-problems-and-how-to-avoid-them/" target="_blank" rel="noopener">这里</a></p>
<h2 id="CSS-Modules"><a href="#CSS-Modules" class="headerlink" title="CSS Modules"></a>CSS Modules</h2><p>在 react 和 vue 中使用过，其做法是给 class 后拼上一串 hash 值，以此保证样式名称不会冲突</p>
<h2 id="CSS-in-JS"><a href="#CSS-in-JS" class="headerlink" title="CSS in JS"></a>CSS in JS</h2><p>代表为<a href="https://github.com/styled-components/styled-components" target="_blank" rel="noopener">styled-components</a>，即将样式写到组件内部。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>OOCSS</code>和<code>BEM</code>的实施离不开 ui 设计，在开发之前，ui 需要有自己的一套组件库（图片），开发应当在开发具体页面之前首先在代码层面实现 ui 的零散组件，后续开发除非临时需求或者特殊样式，使用这套 ui 库应当就能组合出所需要的页面。</p>
<p>相对比较而言，最新的两种 css 都需要框架或者编译器的支撑，在普适性上不如前三者，但这两者不存在学习成本，上手比较容易。就目前使用体验来看，<code>BEM</code>具有高复用、高拓展、易维护、易阅读、无捆绑，但由于其需要一定的学习成本和实践摸索，想要用好有一定难度。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>BEM</tag>
      </tags>
  </entry>
  <entry>
    <title>docker入门笔记</title>
    <url>/2019/06/28/docker%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>认识 docker 至今也有一年多一点了，在此之前对 docker 或多或少已经有了一些了解，这里主要记录一下安装已经打包镜像。</p>
<p>内容基本都是摘录自网上，方便以后查找。这里以 centos7 为例。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先安装必要环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>

<p>安装 docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure>

<p>启动 docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h2 id="打包-node-服务镜像"><a href="#打包-node-服务镜像" class="headerlink" title="打包 node 服务镜像"></a>打包 node 服务镜像</h2><p>首先进到 node 项目根目录下，执行<code>touch Dockerfile</code>，写入如下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 拉取官方镜像10-alpine版本</span></span></span><br><span class="line">FROM node:10-alpine</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 工作路径</span></span></span><br><span class="line">WORKDIR /usr/src/app</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 将package.json拷贝到docker中</span></span></span><br><span class="line">COPY package*.json ./</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装yarn</span></span></span><br><span class="line">RUN npm install -g yarn</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 设置淘宝镜像</span></span></span><br><span class="line">RUN yarn config set registry https://registry.npm.taobao.org -g</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 安装依赖</span></span></span><br><span class="line">RUN yarn</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 将本地项目代码拷贝至docker</span></span></span><br><span class="line">COPY . .</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 暴露3333端口</span></span></span><br><span class="line">EXPOSE 3333</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 执行yarn start启动服务</span></span></span><br><span class="line">CMD [ "yarn", "start" ]</span><br></pre></td></tr></table></figure>

<p>执行<code>touch .dockerignore</code>，这里放入需要忽略的文件，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node_modules</span><br></pre></td></tr></table></figure>

<p>之后执行<code>docker build -t l1016482011/prisma-rest .</code>打包镜像。可以执行<code>docker images</code>查看当前镜像信息。</p>
<p>通过执行<code>docker run -p 3333:3333 -d l1016482011/prisma-rest</code>启动进行，访问本机<code>3333</code>端口即可。</p>
<h2 id="一些常用信息"><a href="#一些常用信息" class="headerlink" title="一些常用信息"></a>一些常用信息</h2><p><a href="https://cloud.docker.com/" target="_blank" rel="noopener">docker hub</a></p>
<p><a href="https://www.runoob.com/docker/docker-command-manual.html" target="_blank" rel="noopener">docker 命名大全</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>expo开发心得</title>
    <url>/2020/09/07/expo%E5%BC%80%E5%8F%91%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<p>最近自己用<code>uniapp</code>做小程序的时候，顿时就觉得刚工作是的<code>expo</code>的开发经验还是有点帮助的，这里重新温习当时做<code>expo</code>时的工作心得。</p>
<p>这个<code>expo</code>的小项目已上传至我的 <a href="https://github.com/chenlong-frontend/expo-app" target="_blank" rel="noopener">github</a></p>
<h2 id="react-native"><a href="#react-native" class="headerlink" title="react native"></a>react native</h2><h4 id="读取本地文件流"><a href="#读取本地文件流" class="headerlink" title="读取本地文件流"></a>读取本地文件流</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 文件返回值</span></span><br><span class="line">  <span class="built_in">console</span>.log(xhr.response)</span><br><span class="line">&#125;</span><br><span class="line">xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Network request failed'</span>))</span><br><span class="line">&#125;</span><br><span class="line">xhr.responseType = <span class="string">'blob'</span></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, uri, <span class="literal">true</span>)</span><br><span class="line">xhr.send(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure>

<h4 id="点击反馈"><a href="#点击反馈" class="headerlink" title="点击反馈"></a>点击反馈</h4><p>由于兼容性问题，需要判断平台使用哪种点击反馈</p>
<p>安卓中使用 <code>TouchableNativeFeedback</code> 组件</p>
<p>IOS 中使用 <code>TouchableOpacity</code> 组件</p>
<h4 id="关于-flatList-的和-reflash-的使用"><a href="#关于-flatList-的和-reflash-的使用" class="headerlink" title="关于 flatList 的和 reflash 的使用"></a>关于 flatList 的和 reflash 的使用</h4><p>之前在使用 flatList 时，按照文档的说明，在 flatList 中配置下拉刷新的行为，但出现一个问题，当数据为空时，将无法进行刷新，此种情况可以通过设置 flatList 的 ListEmptyComponent 来保证空白数据可刷新，或者在父级组件中使用刷新组件(前提是父级组件有高度)</p>
<h4 id="关于修改问题后必须清空数据重新加载问题"><a href="#关于修改问题后必须清空数据重新加载问题" class="headerlink" title="关于修改问题后必须清空数据重新加载问题"></a>关于修改问题后必须清空数据重新加载问题</h4><p>首页的图片并不是随着列表一并返回到前端的，而是根据 fileToken 进行二次查询的，如果在不清空数据的情况下去获取数据，会出现编辑时添加的图片无法得到及时的更新，因为编辑问题是 fileToken 不会变，列表引用的展示图片的子组件也不会发生更新，也就不会去请求新的图片，目前采用的是清空数据</p>
<h2 id="Expo"><a href="#Expo" class="headerlink" title="Expo"></a>Expo</h2><h4 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h4><ol>
<li>注册 expo 账号，使用 expo-cli 创键项目，安装依赖，通过 <code>expo start</code> 运行项目、</li>
<li>手机调至开发者模式，连接电脑，点击在模拟器中打开，会 cli 工作会自动安装 expo app 并打开项目</li>
<li>开发完成时，通过 <code>expo build:android</code> 或 <code>expo build:ios</code>打包</li>
<li>关于发布，如果使用 OTA 更新，只需打包一次，之后只需发布即可，应用会自动从云端更新</li>
<li>打包后会生成一个二维码，可以在 expo app 中直接打开</li>
</ol>
<h4 id="OTA-配置"><a href="#OTA-配置" class="headerlink" title="OTA 配置"></a>OTA 配置</h4><p>在 app.json 中加入以下代码即可</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"updates": &#123;</span><br><span class="line">    "enabled": true,</span><br><span class="line">    "checkAutomatically": "ON_LOAD",</span><br><span class="line">    "fallbackToCacheTimeout": 30000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置-OTA-获取资源路径"><a href="#配置-OTA-获取资源路径" class="headerlink" title="配置 OTA 获取资源路径"></a>配置 OTA 获取资源路径</h4><ol>
<li>通过执行例如 <code>expo export --public-url https://raw.githubusercontent.com/1016482011/bager-mobile/master</code>指令导出 js 和 html 的静态文件</li>
<li>将导出的文件上传到你上一步所指定的服务器目录下</li>
<li>进行 app 在线打包 <code>https://raw.githubusercontent.com/1016482011/bager-mobile/master/android-index.json&gt;</code>，此指令为安卓打包，ios 同理</li>
</ol>
<h4 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h4><p>expo 项目默认是开源公开的，如果不想公开在 app.json 里设置 <code>&quot;privacy&quot;: &quot;unlisted&quot;,</code></p>
<h4 id="实用的资源站点"><a href="#实用的资源站点" class="headerlink" title="实用的资源站点"></a>实用的资源站点</h4><ol>
<li><a href="http://native.directory/" target="_blank" rel="noopener">经过删选评分的 react native 组件</a></li>
<li><a href="https://expo.github.io/vector-icons/" target="_blank" rel="noopener">expo 中的图标库</a></li>
</ol>
<h4 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h4><p>地理位置的接口在国内使用问题：</p>
<ol>
<li>获取的经纬度与使用的高德地图使用的不是同一套标准</li>
<li>目前已知的此接口在华为手机中无法使用</li>
</ol>
<h4 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h4><p>expo 中只支持谷歌地图，实践证明国内无法使用，如果确实需要地址，可以内嵌 webview 来使用 web 版的地图</p>
<h4 id="ImagePicker"><a href="#ImagePicker" class="headerlink" title="ImagePicker"></a>ImagePicker</h4><p>此功能的 <code>quality</code> 设置仅在裁剪时生效</p>
<h4 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h4><p>状态栏在双平台下表现不一致，expo 在安卓下默认是全屏，即安卓从状态栏顶部开始布局，而 ios 从底部开始布局</p>
<p>鉴于此种情况建议使用 react-navigation 提供的 header，或者自行根据不同平台做适配</p>
<h4 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h4><p>在引用资源时，发现问题为 html 文件，在开发环境中可以引用，但打包之后的文件中并没有 html 文件，目前的解决方案是将 html 文件放到公网上，然后通过网络加载的方式获取</p>
<h2 id="react-navigation"><a href="#react-navigation" class="headerlink" title="react-navigation"></a>react-navigation</h2><p>子路由无法清除父路由</p>
<h4 id="跳转首页和登录页"><a href="#跳转首页和登录页" class="headerlink" title="跳转首页和登录页"></a>跳转首页和登录页</h4><p>首先说明一下 app 中每跳往一个新的路由，app 都会打开一个新的窗口，原先页面的组件并不会销毁，当直接已打开的页面时，不会触发原先页面的任何生命周期，但可以通过 react-navigation 的事件进行监听，如果有必要的话</p>
<p>在提交完表单后，通过按下安卓的物理返回键不应该可以返回到提交页面，一般可以用 replace 解决，但首页和登录页在点击返回键时，应该直接退出应用，如果可以的话应该清空整个路由栈，然后进行跳转，实践证明清空路由栈的做法在子路由中无法执行，设计时应该避免此种情况，如果避免不了，应该在登录页和首页拦截返回事件，屏蔽默认事件并退出应用</p>
<h4 id="使用-navigation-提供的-header"><a href="#使用-navigation-提供的-header" class="headerlink" title="使用 navigation 提供的 header"></a>使用 navigation 提供的 header</h4><p>如果 header 中存在和当前页面的联动操作时，可以使用自定义 header 组件并配合 redux 使用，例子如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意此处的所有变量都是redux中的状态，problemListModelAction是redux的action</span></span><br><span class="line">&lt;Header</span><br><span class="line">    title=&#123;proName&#125;</span><br><span class="line">    leftIcon=&#123;<span class="literal">null</span>&#125;</span><br><span class="line">    type=&#123;!listModel ? <span class="string">'FontAwesome'</span> : <span class="string">'MaterialIcons'</span>&#125;</span><br><span class="line">    rightIcon=&#123;!listModel ? <span class="string">'map'</span> : <span class="string">'format-list-bulleted'</span>&#125;</span><br><span class="line">    onRightPress=&#123;() =&gt; problemListModelAction()&#125;</span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">    headerTitle: <span class="xml"><span class="tag">&lt;<span class="name">ProListHeaderWarp</span> /&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在组件外调用路由"><a href="#在组件外调用路由" class="headerlink" title="在组件外调用路由"></a>在组件外调用路由</h4><p>如果存在在组件外调用路由的需求，比如在 redux 中进行跳转，可按如下进行配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NavigationService.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; NavigationActions, StackActions &#125; <span class="keyword">from</span> <span class="string">'react-navigation'</span></span><br><span class="line"><span class="keyword">let</span> _navigator</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTopLevelNavigator</span>(<span class="params">navigatorRef</span>) </span>&#123;</span><br><span class="line">  _navigator = navigatorRef</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">navigate</span>(<span class="params">routeName, params</span>) </span>&#123;</span><br><span class="line">  _navigator.dispatch(</span><br><span class="line">    NavigationActions.navigate(&#123;</span><br><span class="line">      routeName,</span><br><span class="line">      params</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  navigate,</span><br><span class="line">  setTopLevelNavigator</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// APP.js</span></span><br><span class="line"></span><br><span class="line">&lt;AppNavigator</span><br><span class="line">    ref=&#123;navigatorRef =&gt; &#123;</span><br><span class="line">    NavigationService.setTopLevelNavigator(navigatorRef)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<p>之后便可以调用 NavigationService 中的 navigate 进行路由跳转了，但此方法进行的跳转路由无法去影响其他路由，例如 replace 和清空路由栈</p>
<h4 id="关于不实现拦截-tab-跳转需求问题"><a href="#关于不实现拦截-tab-跳转需求问题" class="headerlink" title="关于不实现拦截 tab 跳转需求问题"></a>关于不实现拦截 tab 跳转需求问题</h4><p>按照文档说明，在 tab 页面中可以获取到页面跳转的事件，但并没有得到当前页面 url 和目标页面 url，虽然文档里说可以得到，之后未作深入调查，或许使用自定义 tab 栏可以更好的实现</p>
<h4 id="修复大屏手机下标题栏顶部不同色块方法"><a href="#修复大屏手机下标题栏顶部不同色块方法" class="headerlink" title="修复大屏手机下标题栏顶部不同色块方法"></a>修复大屏手机下标题栏顶部不同色块方法</h4><p>使用了 react-navigation 的 header，并使用自定义 header 之后，在大屏手机上会出现 head 顶部有一条约 2px 的线，需要在配置 header 组件的同时设置 header 的背景色，具体如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> navigationOptions = &#123;</span><br><span class="line">  headerTitle: <span class="xml"><span class="tag">&lt;<span class="name">ProListHeaderWarp</span> /&gt;</span></span>,</span><br><span class="line">  headerStyle: &#123;</span><br><span class="line">    backgroundColor: <span class="string">'#3781C6'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处的 <code>#3781C6</code> 会同时应用到安卓手机的状态栏上</p>
<h2 id="native-base"><a href="#native-base" class="headerlink" title="native base"></a>native base</h2><p>在入口页面引入 root 组件，来使用 nativebase 的全部功能</p>
<h4 id="定制主题"><a href="#定制主题" class="headerlink" title="定制主题"></a>定制主题</h4><p><a href="https://nativebase.io/customizer/" target="_blank" rel="noopener">在线定制主题</a></p>
<p>注意如果使用了定制主题，需要执行 <code>node node_modules/native-base/ejectTheme.js</code>，来或者所有的样式文件，并在入口中通过以下方式引入</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;StyleProvider style=&#123;getTheme(variables)&#125;&gt;</span><br><span class="line">  &lt;Root&gt;&#123;其他代码&#125;&lt;<span class="regexp">/Root&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>StyleProvider&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>react-native</tag>
        <tag>expo</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2019/03/26/git/</url>
    <content><![CDATA[<p>最近工作中在使用 git 来管理项目，以下是对于一些自己实际遇到一些坑的总结。</p>
<h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>之前遇到一个比较特殊的情况，同一个项目下两个分支一个是开发代码，一个是文档工具，切换分支不太方便，通过以下方式来重命名文件夹名称。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone 项目地址 重命名</span><br></pre></td></tr></table></figure>

<h2 id="添加本地仓库"><a href="#添加本地仓库" class="headerlink" title="添加本地仓库"></a>添加本地仓库</h2><p>刚开始的时候我是使用<code>git add .</code>来添加修改文件到本地仓库的，但有一个由于我的疏忽，我没有在根目下执行这条指令，导致一些修改文件没有被提交。在这件事之后我改用<code>git add --all</code>来添加所有的改动，并使用<code>git status</code>查看文件是否正确。</p>
<h2 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h2><p>当需要对一个项目进行大改一般会新建一个分支，使用<code>git checkout -b 分支名称</code>来新建一个分支并同时切换到那个分支上，使用<code>git checkout 分支名称</code>来切换分支，使用<code>git merge 分支名称</code>将指定分支合并到当前分支。</p>
<h2 id="切换本地默认分支"><a href="#切换本地默认分支" class="headerlink" title="切换本地默认分支"></a>切换本地默认分支</h2><p>当从主分支切换到其他分支时，每次提交拉取代码时都要加上<code>origin 分支名称</code>，可使用<code>git push --set-upstream origin 分支名称</code>将指定分支切换为本地默认分支。</p>
<h2 id="git-commit-回退"><a href="#git-commit-回退" class="headerlink" title="git commit 回退"></a>git commit 回退</h2><p>有时<code>commit</code>代码之后发现把无用的东西提交了，可使用<code>git log</code>打印出最近的<code>commit</code>记录，然后通过<code>git reset --soft|--mixed|--hard &lt;commit_id&gt;</code>来进行<code>commit</code>回退。</p>
<ul>
<li>mixed 会保留源码,只是将 git commit 和 index 信息回退到了某个版本.</li>
<li>soft 保留源码,只回退到 commit 信息到某个版本.不涉及 index 的回退,如果还需要提交,直接 commit 即可.</li>
<li>hard 源码也会回退到某个版本,commit 和 index 都会回退到某个版本.(注意,这种方式是改变本地代码仓库源码)</li>
</ul>
<p>提交时使用 <code>git push -f</code></p>
<h2 id="更换远程地址"><a href="#更换远程地址" class="headerlink" title="更换远程地址"></a>更换远程地址</h2><p>遇到过一次项目远程地址更换，可使用<code>git remote set-url origin https://gitee.com/yunbin_product/jellyfish.git</code>进行更换</p>
<h2 id="git-区分大小写"><a href="#git-区分大小写" class="headerlink" title="git 区分大小写"></a>git 区分大小写</h2><p>记得一次我修改了某文件夹的首字母的大小写，结果提交的时候并没有产生修改记录，导致了其他人运行项目时出错，后经排查是 git 忽略了大小写，可使用如下配置正确区分大小写。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config core.ignorecase false</span><br></pre></td></tr></table></figure>

<h2 id="git-用户名邮箱等配置"><a href="#git-用户名邮箱等配置" class="headerlink" title="git 用户名邮箱等配置"></a>git 用户名邮箱等配置</h2><p>使用<code>git config --list</code>可列出所有的 git 配置，使用如下方式配置用户名邮箱等</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name "1016482011"</span><br><span class="line">git config --global user.email 2956957982@qq.com</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>kview</title>
    <url>/2020/11/05/kview/</url>
    <content><![CDATA[<p>今年年中接手了一个全新的项目，定位是半解决方案半sdk，之所以加个半是因为，我们需要对外提供一个开箱即用的应用，但同时第三方也可以屏蔽掉我们ui，通过我们暴露的接口实现一套和我们不同风格但功能一样的应用。</p>
<p>我的方案是，将项目切成三块</p>
<ul>
<li>接口sdk</li>
<li>ui基础组件库</li>
<li>业务功能实现</li>
</ul>
<p>接口层使用typescript实现，ui组件库和业务层使用vue + typescript。</p>
<p>由于这个项目特殊地方在于需要上大屏展示，用普通的ui 库简单改改无法满足ui 要求，所以在组件上面要求我从 0开始。</p>
<p>这次要讲的 kview 便是 ui 基础组件库。为了避免后续的重复劳动，和规范 ui的设计，我在项目之初，在实现完接口sdk后，并没有急着实现业务功能，而是拆解ui图纸上的一个个小组件，在实现完这些小组件后再进行业务功能的拼装。</p>
<p>由于我之前也没有过实现一个ui 库的经验，所以我选择了以同样是 vue的element ui为老师，遇到不清楚的地方，便会一点点的去阅读 element ui的源码，然后应用到自身的项目中（因为我们项目是 typescript的，直接复制源码是无法使用的）。</p>
<p>在这过程中，我印象比较深刻的有 <code>select</code>组件中 <code>emitter</code>的使用，完美解决了<code>select</code>和<code>option</code>之前的事件触发问题。同样的还有<code>dialog</code>中的<code>popup</code>下拉的<code>popper</code>以及<code>form</code>组件，这些都让我收益良多。</p>
<p>在样式方面，我之前使用 scss或者less基本就只使用了个嵌套写法，其他和写css一样，这次通过研读element ui的BEM函数的使用，并将至成功应用到了kview中。</p>
<p>通过这次kview的折腾，对 ui的库的开发和实现有了更深刻的理解和认识。下面附上地址。</p>
<p><a href="https://github.com/chenlong-frontend/vue-technology-ui" target="_blank" rel="noopener">kview github</a></p>
<p><a href="http://119.3.156.49:9090/#/zh-CN/" target="_blank" rel="noopener">kview 文档</a></p>
]]></content>
      <categories>
        <category>kview</category>
      </categories>
      <tags>
        <tag>kview</tag>
        <tag>vue</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>linux入门笔记</title>
    <url>/2019/05/06/linux%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>最近由于购买了一个 linux 服务器，操作是在有些蹩脚，便在 <a href="https://www.imooc.com/learn/175" target="_blank" rel="noopener">慕课</a> 上简单学了点入门知识，以便在使用服务器是不至于太难受。</p>
<h3 id="一些常用指令"><a href="#一些常用指令" class="headerlink" title="一些常用指令"></a>一些常用指令</h3><p>文件操作指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd -                   // 进入上次操作目录</span><br><span class="line">cp                     // 复制文件</span><br><span class="line">cp -r                  // 复制文件夹</span><br><span class="line">ln -s                  // 创建软连接，源文件写绝对路径</span><br><span class="line">whereis(which)         // 搜索指令所在目录</span><br><span class="line">find /home -name "?s"  // 模糊查询</span><br><span class="line">grep                   // 搜索文件内容</span><br></pre></td></tr></table></figure>

<p>其他指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">man                 // 查看指令帮助文档</span><br><span class="line">cat /etc/shells     // 查看系统支持的shell版本，如有/usr/bin/tmux，可通过tmux进入，exit退出</span><br><span class="line">alias &lt;指令&gt; = ''   // 给指令指定别名，写入~/.bashrc环境变量永久保存</span><br><span class="line">history             // 查看历史记录，使用 !字符串 重复执行最后一条以该字符串开头的命令</span><br></pre></td></tr></table></figure>

<h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><ol>
<li><code>&gt;</code>，以覆盖的方式，输出重定向，将正确命令输出保存到指定文件，<code>2&gt;</code>记录错误，<code>&amp;&gt;</code> 正确错误都记录</li>
<li><code>&gt;&gt;</code>， 以追加的方式，将正确输出写入指定文件或设备,<code>2&gt;&gt;</code>记录错误，<code>&amp;&gt;&gt;</code> 正确错误都记录</li>
<li><code>|</code>， <code>命令1 | 命令2</code> 管道符，命令 1 的操作结果作为命令 2 的操作对象</li>
</ol>
<h3 id="多命令顺序执行"><a href="#多命令顺序执行" class="headerlink" title="多命令顺序执行"></a>多命令顺序执行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">;   // 命令1 ; 命令2</span><br><span class="line">&amp;&amp;  // 命令1 &amp;&amp; 命令2 逻辑与</span><br><span class="line">||  // 命令1 || 命令2 逻辑或</span><br></pre></td></tr></table></figure>

<h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">?      // 匹配一个任意字符</span><br><span class="line">*      // 匹配任意</span><br><span class="line">[]     // 匹配括号任意一个字符</span><br><span class="line">[-]    // 匹配范围内任一字符</span><br><span class="line">[^]    // 匹配不是中括号内的一个字符</span><br></pre></td></tr></table></figure>

<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">双击tab // 显示补全选项</span><br><span class="line">ctrl+a // 光标移到到命令行行首</span><br><span class="line">ctrl+e // 光标移动到命令行行尾</span><br><span class="line">ctrl+u // 从光标所在位置删除到行首</span><br><span class="line">ctrl+r // 从历史命令中搜索</span><br><span class="line">ctrl+z // 将当前进程暂停，jobs查看后台指令，bg %N将第N个任务在后台运行， fg %N取出第N个指令，bg，fg默认对最后一个进程进行操作</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hook</title>
    <url>/2021/04/14/hook%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
    <content><![CDATA[<p>本篇源码解读基于 <a href="https://github.com/preactjs/preact" target="_blank" rel="noopener">preact</a>，版本号为 10.5.13</p>
<p>主要涉及的<code>API</code>为: <code>useState</code>, <code>useReducer</code>, <code>useEffect</code></p>
<h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><p><a href="https://github.com/preactjs/preact/blob/master/hooks/src/index.js#L125" target="_blank" rel="noopener">useState</a> 声明如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useState</span>(<span class="params">initialState</span>) </span>&#123;</span><br><span class="line">	currentHook = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> useReducer(invokeOrReturn, initialState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着看 <a href="https://github.com/preactjs/preact/blob/master/hooks/src/index.js#L136" target="_blank" rel="noopener">useReducer</a>:</p>
<p>根据官方文档说明，这是一个 <code>useState</code> 的替代方案，第一个参数<code>reducer</code>格式为 <code>(state, action) =&gt; newState</code>，并且返回当前的 <code>state</code> 以及与其配套的 <code>dispatch</code> 方法。类似于 <code>redux</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useReducer</span>(<span class="params">reducer, initialState, init</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取当前hook状态值</span></span><br><span class="line">	<span class="keyword">const</span> hookState = getHookState(currentIndex++, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * reducer 函数如下</span></span><br><span class="line"><span class="comment">  * function invokeOrReturn(arg, f) &#123;</span></span><br><span class="line"><span class="comment">  *  return typeof f == 'function' ? f(arg) : f;</span></span><br><span class="line"><span class="comment">  * &#125;</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line">	hookState._reducer = reducer;</span><br><span class="line">  <span class="comment">// 如果hook是第一次创建</span></span><br><span class="line">	<span class="keyword">if</span> (!hookState._component) &#123;</span><br><span class="line">		hookState._value = [</span><br><span class="line">      <span class="comment">// 初始值</span></span><br><span class="line">			!init ? invokeOrReturn(<span class="literal">undefined</span>, initialState) : init(initialState),</span><br><span class="line"></span><br><span class="line">      <span class="comment">// dispatch</span></span><br><span class="line">			action =&gt; &#123;</span><br><span class="line">        <span class="comment">// 相当于redux里的reducer，得出计算之后的新值，如果是useState的情况，直接返回新值</span></span><br><span class="line">				<span class="keyword">const</span> nextValue = hookState._reducer(hookState._value[<span class="number">0</span>], action);</span><br><span class="line">        <span class="comment">// 对比新旧值是否发生了变化，如果发生了变化会重新赋值</span></span><br><span class="line">				<span class="keyword">if</span> (hookState._value[<span class="number">0</span>] !== nextValue) &#123;</span><br><span class="line">					hookState._value = [nextValue, hookState._value[<span class="number">1</span>]];</span><br><span class="line">					hookState._component.setState(&#123;&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		];</span><br><span class="line">    <span class="comment">// hookState的_component设置为 当前组件 currentComponent</span></span><br><span class="line">		hookState._component = currentComponent;</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="comment">// 返回当前的 state 以及与其配套的 dispatch 方法</span></span><br><span class="line">	<span class="keyword">return</span> hookState._value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHookState</span>(<span class="params">index, type</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (options._hook) &#123;</span><br><span class="line">		options._hook(currentComponent, index, currentHook || type);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	currentHook = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果当前组件存在hooks，返回组件当前hooks值</span></span><br><span class="line">  <span class="comment">// 如果不存在，则创建一个包含 _list 和 _pendingEffects属性的对象，并赋值给 currentComponent的 __hooks属性</span></span><br><span class="line">	<span class="keyword">const</span> hooks =</span><br><span class="line">		currentComponent.__hooks ||</span><br><span class="line">		(currentComponent.__hooks = &#123;</span><br><span class="line">			_list: [],</span><br><span class="line">			_pendingEffects: []</span><br><span class="line">		&#125;);</span><br><span class="line">  <span class="comment">// 创建一个新hook状态对象，压入hooks的数组，并且将其返回</span></span><br><span class="line">	<span class="keyword">if</span> (index &gt;= hooks._list.length) &#123;</span><br><span class="line">		hooks._list.push(&#123;&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">  <span class="comment">// 否则返回原有的hook状态值</span></span><br><span class="line">	<span class="keyword">return</span> hooks._list[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p><a href="https://github.com/preactjs/preact/blob/master/hooks/src/index.js#L163" target="_blank" rel="noopener">useEffect</a> 声明如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useEffect</span>(<span class="params">callback, args</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">const</span> state = getHookState(currentIndex++, <span class="number">3</span>);</span><br><span class="line">  <span class="comment">// 对比指定值是否发生变化</span></span><br><span class="line">	<span class="keyword">if</span> (!options._skipEffects &amp;&amp; argsChanged(state._args, args)) &#123;</span><br><span class="line">    <span class="comment">// 将回调函数赋给 _value</span></span><br><span class="line">		state._value = callback;</span><br><span class="line">    <span class="comment">// 如果传入了要监听的值，此处便会赋给 _args，下次数据发生变化后会执行</span></span><br><span class="line">		state._args = args;</span><br><span class="line">    <span class="comment">// 加入待处理任务</span></span><br><span class="line">		currentComponent.__hooks._pendingEffects.push(state);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>hook</tag>
      </tags>
  </entry>
  <entry>
    <title>关于设置localStorage过期时间</title>
    <url>/2019/03/22/localStorage/</url>
    <content><![CDATA[<p>今天有被问到如何实现给 localStorage 添加过期时间。经过慢慢思考，我想到的方法下可以归结为以下几种：</p>
<ol>
<li>将时间拼接到值之后。比如<code>set(&quot;username&quot;,&quot;1553264048068;&quot;,1553264048068)</code>，实际存的值为<code>localStorage.setItem(&quot;username&quot;,&quot;1553264048068;;1553264048068&quot;)</code>。取值的策略时反向寻找到第一个分割符<code>;</code>,并将将其截取。</li>
<li>使用对象进行二次组合。比如<code>set(&quot;username&quot;,&quot;Marcus&quot;,1553264048068)</code>,实际存的值为<code>localStorage.setItem({&quot;value&quot;:&quot;Marcus&quot;,&quot;expire&quot;:1553264048068})</code>。取值的策略是<code>JSON.parse</code>后去取出值和时间。</li>
</ol>
<p>两种方法的本质都一样，都是将值和时间进行了拼接，在我现在看来这两个方法有个最大的问题就是修改了原来的值，在解析的时候往往是 bug 产生的源泉，因为你很难去预期使用者会传入什么值。</p>
<p>后来在阅读了<a href="https://github.com/marcuswestin/store.js" target="_blank" rel="noopener">store.js</a>后，恍然大悟，<code>namespace</code>，我无法预期用户值的类型，但我可以预期 name 的类型，在 name 上加上一个同为 string 类型的命名空间便可解决这个问题。<code>set(&quot;username&quot;,&quot;Marcus&quot;,1553264048068)</code>，实际存为<code>localStorage.setItem(&quot;username&quot;:&quot;Marcus&quot;)</code>和<code>localStorage.setItem(&quot;expire_username&quot;:&quot;1553264048068&quot;)</code>。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>localStorage</tag>
      </tags>
  </entry>
  <entry>
    <title>prisma、jwt入门笔记</title>
    <url>/2019/06/26/prisma%E4%BB%A5%E5%8F%8Ajwt%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>最近利用空闲时间学习了一下 prisma 简单使用，对于我这种前端开发者确实相当方便。</p>
<h2 id="prisma"><a href="#prisma" class="headerlink" title="prisma"></a>prisma</h2><p>在 docker 中使用 prisma 相当方便。安装流程可以看<a href="https://prisma.1wire.com/blog/newdatabase" target="_blank" rel="noopener">这里</a>。</p>
<p>这里就我当初的初识 prisma 时的疑惑谈一谈。</p>
<h3 id="启动失败"><a href="#启动失败" class="headerlink" title="启动失败"></a>启动失败</h3><p>一开始因为数据库配置一直无法启动服务。在执行<code>prisma deploy</code>报如下错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">could not connect to server at http://localhost:4466.Please check if your server is running.</span><br></pre></td></tr></table></figure>

<p>只是看这个我当时也不知道错在哪里，后来通过查看日志找到了问题所在。</p>
<p>首先执行<code>docker-compose ps</code>查看容器名称，再执行<code>docker logs --tail 50 --follow --timestamps prismademo_prisma_1</code>查看容器的报错，其中<code>prismademo_prisma_1</code>是你要查看的容器名称。</p>
<p>解决了数据库问题，接着启动又遇到一个报错：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bad indentation of a mapping entry at line 3, column 14:</span><br><span class="line">- generator: javascript-client</span><br></pre></td></tr></table></figure>

<p>因为<code>prisma.yml</code>中的<code>- generator: javascript-client</code>少了个缩进。。。，加上一个缩进空格即可。</p>
<h3 id="prisma-client"><a href="#prisma-client" class="headerlink" title="prisma-client"></a>prisma-client</h3><p>关于这个生成的客户端的方式，我尝试过几种，最终选择了 rest 风格方式。具体使用方式可见我写的一个简单的<a href="https://github.com/1016482011/prisma-rest" target="_blank" rel="noopener">例子</a>。</p>
<p>其中<code>src/prisma-client</code>下的两个文件便是由<code>prisma generate</code>生成，复制到你的 node 中间层即可。</p>
<p>其中有一点需要注意，如果你需要远程调用 prisma 的接口的话，需要修改<code>prisma-client</code>下的<code>index.js</code>文件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">exports.Prisma = prisma_lib_1.makePrismaClientClass(&#123;</span><br><span class="line">  typeDefs,</span><br><span class="line">  models,</span><br><span class="line">  <span class="comment">// 此处将localhost改为你的服务器地址</span></span><br><span class="line">  endpoint: <span class="string">`http://xxxxxxx:4466`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h3 id="列表的联表查询"><a href="#列表的联表查询" class="headerlink" title="列表的联表查询"></a>列表的联表查询</h3><p>默认查询只能查出自身的字段，如果需要他表关联数据或者需要简化查询返回字段，可以通过如下方式:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> query = <span class="string">`</span></span><br><span class="line"><span class="string">  query &#123;</span></span><br><span class="line"><span class="string">    webAddBalances&#123;</span></span><br><span class="line"><span class="string">      id,</span></span><br><span class="line"><span class="string">      Amount,</span></span><br><span class="line"><span class="string">      Createtime,</span></span><br><span class="line"><span class="string">      User&#123;realname&#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> prisma.$graphql(query)</span><br></pre></td></tr></table></figure>

<h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h2><p>jwt 使用相对来说简单一些，具体可见<a href="https://github.com/auth0/node-jsonwebtoken#readme" target="_blank" rel="noopener">这里</a>查看具体使用方式：</p>
<p>使用的话也相当简单</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">'jsonwebtoken'</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jwt</span> </span>&#123;</span><br><span class="line">  <span class="comment">//生成token</span></span><br><span class="line">  generateToken(data) &#123;</span><br><span class="line">    <span class="keyword">let</span> created = <span class="built_in">Math</span>.floor(<span class="built_in">Date</span>.now() / <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">let</span> token = jwt.sign(</span><br><span class="line">      &#123;</span><br><span class="line">        data,</span><br><span class="line">        exp: created + <span class="number">60</span> * <span class="number">300</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">'secret'</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 校验token</span></span><br><span class="line">  verifyToken(t) &#123;</span><br><span class="line">    <span class="keyword">let</span> res</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> token = t.replace(<span class="string">'Bearer '</span>, <span class="string">''</span>)</span><br><span class="line">      <span class="keyword">let</span> result = jwt.verify(token, <span class="string">'secret'</span>) || &#123;&#125;</span><br><span class="line">      <span class="keyword">let</span> &#123; exp = <span class="number">0</span> &#125; = result,</span><br><span class="line">        current = <span class="built_in">Math</span>.floor(<span class="built_in">Date</span>.now() / <span class="number">1000</span>)</span><br><span class="line">      <span class="keyword">if</span> (current &lt;= exp) &#123;</span><br><span class="line">        res = result.data || &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      res = e</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Jwt</span><br></pre></td></tr></table></figure>

<p>总的来说，通过这次学习，让我有了快速搭建小型项目的能力，但这些基础还远远不够，后续我也会尽量寻找一些练手的小玩意来深入学习。</p>
]]></content>
      <categories>
        <category>prisma</category>
      </categories>
      <tags>
        <tag>prisma</tag>
      </tags>
  </entry>
  <entry>
    <title>react工作的一些总结</title>
    <url>/2019/04/22/react%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%9301/</url>
    <content><![CDATA[<h2 id="Modal"><a href="#Modal" class="headerlink" title="Modal"></a>Modal</h2><p>根据<a href="https://react.docschina.org/docs/portals.html" target="_blank" rel="noopener">文档描述</a>，portals 可以将子节点渲染到父节点之外的 DOM 当中，这在子组件需要“跳出”容器时非常有用，例如模态框。</p>
<p>其实现核心代码简单如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React from &#39;react&#39;;</span><br><span class="line">import ReactDOM from &#39;react-dom&#39;;</span><br><span class="line">import &#123; Modal as ModalContainer, Props as ModalProps &#125; from &#39;.&#x2F;Modal&#39;;</span><br><span class="line"></span><br><span class="line">interface Props extends ModalProps &#123;&#125;</span><br><span class="line"></span><br><span class="line">interface State &#123;&#125;</span><br><span class="line"></span><br><span class="line">class Modal extends React.Component&lt;Props, State&gt; &#123;</span><br><span class="line">  constructor(props: Props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private el &#x3D; document.createElement(&#39;div&#39;);</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    document.body.appendChild(this.el);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    return ReactDOM.createPortal(&lt;ModalContainer &#123;...this.props&#125; &#x2F;&gt;, this.el);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export &#123; Modal &#125;;</span><br></pre></td></tr></table></figure>

<h2 id="将-src-加入引入路径"><a href="#将-src-加入引入路径" class="headerlink" title="将 src 加入引入路径"></a>将 src 加入引入路径</h2><p>当文件嵌套过深时，可能会存在这样的路径引入-<code>../../../</code>，这种相对路径的引入方式可能会对代码阅读造成困扰，一时间不知道文件具体路径在哪(如果编辑器没有<code>ctrl+左键</code>自动寻址的话)，另外可能有些人也会觉得不太美观，因此可采取的将<code>src</code>将入 node 的引入路径下，具体配置如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; override &#125; = <span class="built_in">require</span>(<span class="string">'customize-cra'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> overrideProcessEnv = <span class="function"><span class="params">()</span> =&gt;</span> <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  config.resolve.modules = [path.join(__dirname, <span class="string">'src'</span>)].concat(</span><br><span class="line">    config.resolve.modules</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = override(overrideProcessEnv());</span><br></pre></td></tr></table></figure>

<h2 id="autocompelete"><a href="#autocompelete" class="headerlink" title="autocompelete"></a>autocompelete</h2><p>在开发 react 表单的时候经常会遇到一个很麻烦的事情，那就是在我不需要的地方，浏览器也给我自动填充了用户名和密码，并且设置<code>autoComplete=&quot;off&quot;</code>无效。</p>
<p>可采用如下方式进行最简单的处理：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;Input autoComplete=<span class="string">"new-password"</span> type=<span class="string">"password"</span> placeholder=<span class="string">"Password"</span> /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="路由用法"><a href="#路由用法" class="headerlink" title="路由用法"></a>路由用法</h2><p>match 即为上级路由，在使用此路由时传入，此种路由不同于 hash 路由，不存在<code>#</code>。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Switch&gt;</span><br><span class="line">      &lt;Route</span><br><span class="line">        path=&#123;<span class="string">`<span class="subst">$&#123;match.url&#125;</span>ChatRoom`</span>&#125;</span><br><span class="line">        component=&#123;asyncComponent(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./Chat'</span>))&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;Route</span><br><span class="line">        path=&#123;match.url&#125;</span><br><span class="line">        render=&#123;props =&gt; (</span><br><span class="line">          &lt;Redirect</span><br><span class="line">            to=&#123;&#123;</span><br><span class="line">              pathname: <span class="string">'/ChatRoom'</span>,</span><br><span class="line">              state: &#123; <span class="attr">from</span>: props.location &#125;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="动态加载路由组件"><a href="#动态加载路由组件" class="headerlink" title="动态加载路由组件"></a>动态加载路由组件</h2><p>在上面路由用法中使用的<code>asyncComponent</code>为动态的加载组件，避免首页加载时间过长，可用此种方式进行异步加载。</p>
<p>实现代码如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Nprogress <span class="keyword">from</span> <span class="string">'nprogress'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactPlaceholder <span class="keyword">from</span> <span class="string">'react-placeholder'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'nprogress/nprogress.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'react-placeholder/lib/reactPlaceholder.css'</span>;</span><br><span class="line"><span class="keyword">import</span> CircularProgress <span class="keyword">from</span> <span class="string">'components/CircularProgress'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncComponent</span>(<span class="params">importComponent</span>) </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">AsyncFunc</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">      <span class="keyword">super</span>(props);</span><br><span class="line">      <span class="keyword">this</span>.state = &#123;</span><br><span class="line">        component: <span class="literal">null</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">      Nprogress.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">      <span class="keyword">this</span>.mounted = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> componentDidMount() &#123;</span><br><span class="line">      <span class="keyword">this</span>.mounted = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">const</span> &#123; <span class="attr">default</span>: Component &#125; = <span class="keyword">await</span> importComponent();</span><br><span class="line">      Nprogress.done();</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.mounted) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          component: <span class="xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">      <span class="keyword">const</span> Component = <span class="keyword">this</span>.state.component || <span class="xml"><span class="tag">&lt;<span class="name">CircularProgress</span> /&gt;</span></span>;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;ReactPlaceholder type=<span class="string">"text"</span> rows=&#123;<span class="number">7</span>&#125; ready=&#123;Component !== <span class="literal">null</span>&#125;&gt;</span><br><span class="line">          &#123;Component&#125;</span><br><span class="line">        &lt;<span class="regexp">/ReactPlaceholder&gt;</span></span><br><span class="line"><span class="regexp">      );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  return AsyncFunc;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="登录认证"><a href="#登录认证" class="headerlink" title="登录认证"></a>登录认证</h2><p>react 中实现根据 token 进行登录认证，也就是简单的判断 token 是否存在，如果不存在则跳转登录页。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由重定向</span></span><br><span class="line"><span class="keyword">const</span> RestrictedRoute = <span class="function">(<span class="params">&#123; component: Component, token, ...rest &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;Route</span><br><span class="line">    &#123;...rest&#125;</span><br><span class="line">    render=&#123;props =&gt;</span><br><span class="line">      token ? (</span><br><span class="line">        &lt;Component &#123;...props&#125; /&gt;</span><br><span class="line">      ) : (</span><br><span class="line">        &lt;Redirect</span><br><span class="line">          to=&#123;&#123;</span><br><span class="line">            pathname: <span class="string">'/signin'</span>,</span><br><span class="line">            state: &#123; <span class="attr">from</span>: props.location &#125;</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  /&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; match, token &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;LocaleProvider locale=&#123;antdCN&#125;&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route exact path=<span class="string">"/signin"</span> component=&#123;() =&gt; <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125; /&gt;</span><br><span class="line">          &lt;RestrictedRoute</span><br><span class="line">            path=&#123;<span class="string">`<span class="subst">$&#123;match.url&#125;</span>`</span>&#125;</span><br><span class="line">            token=&#123;token&#125;</span><br><span class="line">            component=&#123;() =&gt; <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>sd<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>LocaleProvider&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>react的一些总结 02</title>
    <url>/2019/05/20/react%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%9302/</url>
    <content><![CDATA[<h2 id="ui-到接口，还是接口到-ui？"><a href="#ui-到接口，还是接口到-ui？" class="headerlink" title="ui 到接口，还是接口到 ui？"></a>ui 到接口，还是接口到 ui？</h2><p>是先写 ui，还是先写接口，有些时候不是我们能够控制的，比如有时候接口还没设计好，有时候 ui 设计慢了一步。</p>
<p>首先是从 ui 到接口的开发过程，顺序大致如下：</p>
<ol>
<li>拿到 ui 图之后我目前的做法是先通过 html 和 css 将页面绘制出来，如果不是套用组件的话，css 采用 BEM 来写，方便后面拆分组件。</li>
<li>页面 ui 全部完成之后就到了拆分组件的时候了，大致按照 BEM 块或者功能模块将 ui 拆分到一个个文件里，在拆分组件的同时也需要完成这个组件的接口和事件。</li>
<li>组件拆分完成后，定义好 redux 状态，并写好 action，并绑定到组件上，这个时候的数据还都是假数据，但业务逻辑应该都已经基本实现。</li>
<li>状态定义完成之后，完成 api 对接即可。</li>
</ol>
<p>再看看接口到 ui，开发的过程可以看成是上面的反过来的情况：</p>
<ol>
<li>首先将 api 全部在文件里定义好。</li>
<li>根据 api 定义规划 redux 状态的 action 和 state，预先将 action 和 state 都定义完。</li>
<li>划分组件，除去公用组件，划分出来的组件应该都是相互独立的，他们通过 redux 通信。</li>
<li>最后将这些组件组装为一个完整的页面，其实这一步和第三步差不多同时进行了。</li>
</ol>
<p>总结：从个人开发体验上来讲，我更喜欢从接口到 ui，开发效率更高，主要体现在，在写 ui 时所有的数据和状态 action 都定义好了，开发比较顺畅，而且根据接口和状态来拆分组件也比较科学，二次拆分情况较少。</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>react之redux</title>
    <url>/2019/05/23/react%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%9303/</url>
    <content><![CDATA[<p>在学习 redux 之初，我们应该都看过官网的例子，其中会提到容器的概念，当时我并不理解何为容器以及为何需要容器，在经历一段时间的开发后对容器的概念有了自己的理解。</p>
<p>以一个常见的列表搜索分页的功能来说，要实现一个如图所示的页面：<img src="/img/react01.png" alt="react01"></p>
<p>可按如下步骤进行：</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>如果后台接口以及到位或者有 mock 接口，可事先在 api 文件里把接口先定义好，如果接口尚未完成，在确认字段后在 api 里返回假数据，例子如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// api.js</span></span><br><span class="line"><span class="comment">// 接口已存在</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> apis = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">'/api/xxx'</span>,</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口尚未定义</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> apis = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(&#123;<span class="attr">xx</span>: <span class="string">'xx'</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="reducer-定义"><a href="#reducer-定义" class="headerlink" title="reducer 定义"></a>reducer 定义</h3><p>接口完成之后，定义页面中我们需要的用到的一些状态，目前我们需要的暂定为以下这些：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  list: [],                <span class="comment">// 当前表格数据</span></span><br><span class="line">  total: <span class="number">0</span>,                <span class="comment">// 总条数</span></span><br><span class="line">  size: <span class="number">8</span>,                 <span class="comment">// 每页多少条</span></span><br><span class="line">  current: <span class="number">1</span>,              <span class="comment">// 当前页数</span></span><br><span class="line">  search: &#123;&#125;               <span class="comment">// 搜索条件</span></span><br><span class="line">  tableloading: <span class="literal">false</span>      <span class="comment">// 表格请求标识</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="action-定义"><a href="#action-定义" class="headerlink" title="action 定义"></a>action 定义</h3><p>状态定义完成之后就是 action 了，首先我个人也是比较讨厌在 reducer 中写一堆 case 条件判断的，所以在每个模块下的会有一个用来设置的 action：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// action.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setReducer = <span class="function">(<span class="params">&#123; name, value &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: SET_XXX_REDUCER,</span><br><span class="line">    payload: &#123; name, value &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// reducer.js</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> SET_XXX_REDUCER: &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; ...state, [action.payload.name]: action.payload.value &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了这个用来设值得 action 之后，接着就是把所有的接口请求分别写成一个 action，就以获取列表的例子来说：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (dispatch, getState) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 获取请求参数</span></span><br><span class="line">      <span class="keyword">const</span> &#123;</span><br><span class="line">        xxx: &#123; size, current, search &#125;</span><br><span class="line">      &#125; = getState()</span><br><span class="line">      dispatch(setReducer(&#123; <span class="attr">name</span>: <span class="string">'tableloading'</span>, <span class="attr">value</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> roles(&#123;</span><br><span class="line">        page: &#123; size, current &#125;,</span><br><span class="line">        ...search</span><br><span class="line">      &#125;)</span><br><span class="line">      dispatch(setReducer(&#123; <span class="attr">name</span>: <span class="string">'list'</span>, <span class="attr">value</span>: res.list &#125;))</span><br><span class="line">      dispatch(setReducer(&#123; <span class="attr">name</span>: <span class="string">'total'</span>, <span class="attr">value</span>: res.total &#125;))</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      message.error(err.message ? err.message : <span class="string">'数据获取失败'</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      dispatch(setReducer(&#123; <span class="attr">name</span>: <span class="string">'tableloading'</span>, <span class="attr">value</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写完 api 对应的 action 之后，在分析一下页面的功能，我们还需要一个改变页码和搜索条件的 action：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改当前页码</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> changePageAction = <span class="function"><span class="params">page</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> dispatch =&gt; &#123;</span><br><span class="line">    dispatch(setReducer(&#123; <span class="attr">name</span>: <span class="string">'current'</span>, <span class="attr">value</span>: page &#125;))</span><br><span class="line">    dispatch(getList())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改查询条件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> changeSearchAction = <span class="function"><span class="params">search</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> dispatch =&gt; &#123;</span><br><span class="line">    dispatch(setReducer(&#123; <span class="attr">name</span>: <span class="string">'search'</span>, <span class="attr">value</span>: search &#125;))</span><br><span class="line">    dispatch(changePageAction(<span class="number">1</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只要保证 reducer 里的值均有输入的 action 此阶段工作就结束了，当然如果像 pageSize 这种不需要改变的可暂且不管。</p>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>状态都已经准备完毕，下面着手组件的编码了，首先按照功能和布局我将页面分为如下几块：<img src="/img/react02.png" alt="react02"></p>
<p>这里其实还有一个新增和编辑的模态框，这个后面会提及到。</p>
<p>首先创建四个文件：<code>index.js</code>、<code>Search.js</code>、<code>Tool.js</code>、<code>Table.js</code>，其中<code>index.js</code>是一个总的页面用来组装容器组件和总体布局，剩下的三个容器组件分别对应图片中的 1，2，3</p>
<p>容器组件初始化的时候先将此组件需要使用的 state 和 action 注入进来，然后再进行具体功能的编码，大致如下：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTable</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  (&#123; <span class="attr">xxx</span>: &#123; current, size, list, total, tableloading &#125; &#125;) =&gt; (&#123;</span><br><span class="line">    current,</span><br><span class="line">    size,</span><br><span class="line">    list,</span><br><span class="line">    total,</span><br><span class="line">    tableloading</span><br><span class="line">  &#125;),</span><br><span class="line">  &#123;</span><br><span class="line">    changePageAction</span><br><span class="line">  &#125;</span><br><span class="line">)(MyTable)</span><br></pre></td></tr></table></figure>

<p>此处需要注意的是此处除去<code>index.js</code>之外的组件均是有状态的容器组件，如果我们需要可以直接复用组件，大部分情况下最好不要使用容器组件。</p>
<h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><p>组件全都完成之后，在<code>index.js</code>进行简单的拼装布局此页面的分页条件查询功能也就完成了。</p>
<h3 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h3><p>此种容器组件没法像通用组件直接复用，但只要组件分解得当，遇到同样功能的时候照样可以做到复制粘贴稍加修改即可使用，这里就以之前留下的新增编辑的模态框来举例。我要实现的功能大致如下，需要同时实现新增和编辑功能：<img src="/img/react03.png" alt="react03"></p>
<p>啥都不说，先上代码：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Input, Modal &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="keyword">import</span> &#123; isNull &#125; <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"><span class="keyword">import</span> &#123; EwForm &#125; <span class="keyword">from</span> <span class="string">'components/Form'</span></span><br><span class="line"><span class="keyword">import</span> &#123; addAction, editAction,hideModalAction&#125; <span class="keyword">from</span> <span class="string">'appRedux/actions/UserManage/roleGrid'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; TextArea &#125; = Input</span><br><span class="line"><span class="keyword">const</span> formItem = [</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">'角色名称'</span>,</span><br><span class="line">    key: <span class="string">'name'</span>,</span><br><span class="line">    required: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    label: <span class="string">'备注'</span>,</span><br><span class="line">    key: <span class="string">'description'</span>,</span><br><span class="line">    component: <span class="xml"><span class="tag">&lt;<span class="name">TextArea</span> <span class="attr">placeholder</span>=<span class="string">"备注"</span> /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMoal</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.formRef = React.createRef()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate(preProps, preState) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; fields &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="comment">// 每次进模态框，给表单设置初始值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.formRef.current &amp;&amp; preProps.fields !== fields) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; setFieldsValue &#125; = <span class="keyword">this</span>.formRef.current</span><br><span class="line">      isNull(fields) ? <span class="keyword">this</span>.reset() : setFieldsValue(fields)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 提交表单</span></span><br><span class="line">  onSubmit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; isSubmit &#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">const</span> &#123; user, addAction, onOk, fields, editAction &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">const</span> &#123; validateFields &#125; = <span class="keyword">this</span>.formRef.current</span><br><span class="line">    <span class="keyword">const</span> isEdit = !!fields</span><br><span class="line">    validateFields(<span class="function">(<span class="params">err, values</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">isSubmit</span>: <span class="literal">true</span> &#125;, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEdit) &#123;</span><br><span class="line">          values.id = fields.id</span><br><span class="line">          editAction(values)</span><br><span class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.reset())</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          values.createBy = user.id</span><br><span class="line">          addAction(values)</span><br><span class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;<span class="keyword">this</span>.reset())</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重置表单</span></span><br><span class="line">  reset = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.formRef.current.resetFields()</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; visible, fields,isSubmit,hideModalAction &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Modal</span><br><span class="line">        title=&#123;<span class="string">`<span class="subst">$&#123;fields ? <span class="string">'编辑'</span> : <span class="string">'新增'</span>&#125;</span>`</span>&#125;</span><br><span class="line">        visible=&#123;visible&#125;</span><br><span class="line">        onOk=&#123;<span class="keyword">this</span>.onSubmit&#125;</span><br><span class="line">        onCancel=&#123;hideModalAction&#125;</span><br><span class="line">        confirmLoading=&#123;isSubmit&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;EwForm ref=&#123;<span class="keyword">this</span>.formRef&#125; items=&#123;formItem&#125; itemCol=&#123;<span class="number">1</span>&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Modal&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const mapStateToProps = (&#123; xx: &#123; fields, visible,isSubmit &#125; &#125;) =&gt; (&#123; fields, visible,isSubmit &#125;)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default connect(</span></span><br><span class="line"><span class="regexp">  mapStateToProps,</span></span><br><span class="line"><span class="regexp">  &#123; addAction, editAction,hideModalAction &#125;</span></span><br><span class="line"><span class="regexp">)(MyMoal)</span></span><br></pre></td></tr></table></figure>

<p>现在看下如何将这个组件放到页面中，首先看状态，需要在 reducer 中添加<code>fields</code>、<code>visible</code>和<code>isSubmit</code>三个，分别用来控制表单初始值和模态框的显示以及提交时的等待标识。然后是五个 action，<code>addAction</code>、<code>editAction</code>、<code>editShowModalAction</code>、<code>addShowModalAction</code>、<code>hideModalAction</code>，分别用来新增请求、编辑请求、编辑显示、新增显示和隐藏，最后在<code>Tool.js</code>中添加上<code>showModalAction</code>，在<code>Table.js</code>中添加上<code>editShowModalAction</code>，别看前面这这么多 action，state，我们要做的就是复制粘贴即可，不过只是粘贴过来肯定是没法用的，有以下几点需要我们做些修改，当然这里我只谈比较通用的，具体的可以结合自己各自的页面做调整，首先是<code>addAction</code>，<code>editAction</code>中将 api 函数替换掉，然后是组件中的<code>formItem</code>替换为自己的表单。</p>
<p>接下来就是测试看功能是否完整了=。=</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>只要我们将页面都拆分为一个个有状态的容器，随着开发的模块越来越多，我们将发现，越来越多的页面可以使用容器进行拼装，效率也会越来越高。</p>
<p>拆分容器的时候一定要秉持一个理念：容器组件不需要大而全，但一定是可拔插的。也就是这个容器组件一定要方便复制粘贴，但没必要覆盖所有需求。</p>
]]></content>
      <categories>
        <category>react</category>
        <category>redux</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>redux</tag>
      </tags>
  </entry>
  <entry>
    <title>记如何在现有开发中可复制模板</title>
    <url>/2019/06/21/react%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%9304/</url>
    <content><![CDATA[<p>开发中难免有一些看似重复，又有一些区别的页面，在这里总结一下在现有脚手架下如何有效率的生成这些页面。</p>
<p>首先命名上，有一个父菜单名用 <code>$P</code>表示，当前页面名用<code>$C</code>表示</p>
<h2 id="列表展示页"><a href="#列表展示页" class="headerlink" title="列表展示页"></a>列表展示页</h2><p>这种页面通常是一个标题，一个搜索，一个工具栏，一个表格</p>
<p>首先是 api：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/apis/$P.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'./request'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注释</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> xxxx = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">''</span>,</span><br><span class="line">    method: <span class="string">''</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>redux 部分，在 constants 中定义一个常量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/constants/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  注释</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_$C_VARIABLE = <span class="string">'SET_$C_VARIABLE'</span></span><br></pre></td></tr></table></figure>

<p>定义 reducer：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/appRedux/reducers/$P/$C</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; SET_$C_VARIABLE &#125; <span class="keyword">from</span> <span class="string">'constants/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  list: [], <span class="comment">// 当前表格数据</span></span><br><span class="line">  total: <span class="number">0</span>, <span class="comment">// 总条数</span></span><br><span class="line">  size: <span class="number">8</span>, <span class="comment">// 每页多少条</span></span><br><span class="line">  current: <span class="number">1</span>, <span class="comment">// 当前页数</span></span><br><span class="line">  search: &#123;&#125;, <span class="comment">// 搜索条件</span></span><br><span class="line">  tableloading: <span class="literal">false</span> <span class="comment">// 表格请求标识</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> SET_$C_VARIABLE: &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, [action.payload.name]: action.payload.value &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer</span><br></pre></td></tr></table></figure>

<p>定义 action：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/appRedux/actions/$P/$C</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="keyword">import</span> &#123; SET_$C_VARIABLE &#125; <span class="keyword">from</span> <span class="string">'constants/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; xxx &#125; <span class="keyword">from</span> <span class="string">'apis/$P'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setReducer = <span class="function">(<span class="params">&#123; name, value &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: SET_$C_VARIABLE,</span><br><span class="line">    payload: &#123; name, value &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取table列表</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getListAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (dispatch, getState) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      $C: &#123; size, current, search, tableloading &#125;</span><br><span class="line">    &#125; = getState()</span><br><span class="line">    <span class="keyword">if</span> (!tableloading)</span><br><span class="line">      dispatch(setReducer(&#123; <span class="attr">name</span>: <span class="string">'tableloading'</span>, <span class="attr">value</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> xxx(&#123;</span><br><span class="line">      page: &#123; size, current &#125;,</span><br><span class="line">      ...search</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      message.error(err.message ? err.message : <span class="string">'数据获取是失败'</span>)</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;)</span><br><span class="line">    dispatch(setReducer(&#123; <span class="attr">name</span>: <span class="string">'tableloading'</span>, <span class="attr">value</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">    <span class="keyword">if</span> (res &amp;&amp; res.code) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res)</span><br><span class="line">    <span class="keyword">if</span> (res.pages !== <span class="number">0</span> &amp;&amp; res.current &gt; res.pages) &#123;</span><br><span class="line">      dispatch(changePageAction(res.pages))</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res.records)</span><br><span class="line">    &#125;</span><br><span class="line">    dispatch(setReducer(&#123; <span class="attr">name</span>: <span class="string">'list'</span>, <span class="attr">value</span>: res.records &#125;))</span><br><span class="line">    dispatch(setReducer(&#123; <span class="attr">name</span>: <span class="string">'total'</span>, <span class="attr">value</span>: res.total &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">xxDeleteAction</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> dispatch =&gt; &#123;</span><br><span class="line">    dispatch(setReducer(&#123; <span class="attr">name</span>: <span class="string">'tableloading'</span>, <span class="attr">value</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> xxDelete(&#123; id &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      message.error(err.message ? err.message : <span class="string">'数据删除失败'</span>)</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;)</span><br><span class="line">    dispatch(setReducer(&#123; <span class="attr">name</span>: <span class="string">'tableloading'</span>, <span class="attr">value</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">    <span class="keyword">if</span> (res &amp;&amp; res.code) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res)</span><br><span class="line">    dispatch(getListAction())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改当前页码</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> changePageAction = <span class="function"><span class="params">page</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> dispatch =&gt; &#123;</span><br><span class="line">    dispatch(setReducer(&#123; <span class="attr">name</span>: <span class="string">'current'</span>, <span class="attr">value</span>: page &#125;))</span><br><span class="line">    dispatch(getListAction())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改查询条件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> changeSearchAction = <span class="function"><span class="params">search</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> dispatch =&gt; &#123;</span><br><span class="line">    dispatch(setReducer(&#123; <span class="attr">name</span>: <span class="string">'search'</span>, <span class="attr">value</span>: search &#125;))</span><br><span class="line">    dispatch(changePageAction(<span class="number">1</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 store 里添加 reducer</p>
<p>视图层：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/containers/$P/$C/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Row, Col, Button &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="keyword">import</span> Widget <span class="keyword">from</span> <span class="string">'components/Widget'</span></span><br><span class="line"><span class="keyword">import</span> Search <span class="keyword">from</span> <span class="string">'./search'</span></span><br><span class="line"><span class="keyword">import</span> Table <span class="keyword">from</span> <span class="string">'./table'</span></span><br><span class="line"><span class="keyword">import</span> &#123; getListAction &#125; <span class="keyword">from</span> <span class="string">'appRedux/actions/$P/$C'</span></span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">'./index.css'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TablePage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.getListAction()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Widget title=<span class="string">"xxx"</span>&gt;</span><br><span class="line">        &lt;Row&gt;</span><br><span class="line">          &lt;Col className=&#123;style[<span class="string">'col__pd0'</span>]&#125; span=&#123;<span class="number">20</span>&#125;&gt;</span><br><span class="line">            &lt;Search /&gt;</span><br><span class="line">          &lt;<span class="regexp">/Col&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Col span=&#123;4&#125; className=&#123;style['text-align__right']&#125;&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Button</span></span><br><span class="line"><span class="regexp">              type="primary"</span></span><br><span class="line"><span class="regexp">              onClick=&#123;() =&gt; this.props.history.push(`xxx/</span>xxx<span class="string">`)&#125;</span></span><br><span class="line"><span class="string">            &gt;</span></span><br><span class="line"><span class="string">              新增</span></span><br><span class="line"><span class="string">            &lt;/Button&gt;</span></span><br><span class="line"><span class="string">          &lt;/Col&gt;</span></span><br><span class="line"><span class="string">        &lt;/Row&gt;</span></span><br><span class="line"><span class="string">        &lt;Table history=&#123;this.props.history&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/Widget&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default connect(</span></span><br><span class="line"><span class="string">  () =&gt; (&#123;&#125;),</span></span><br><span class="line"><span class="string">  &#123; getListAction &#125;</span></span><br><span class="line"><span class="string">)(TablePage)</span></span><br></pre></td></tr></table></figure>

<p>对应 index.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** src/containers/$P/$C/index.css **/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.col__pd0</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text-align__right</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应 search.js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/containers/$P/$C/search.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Form, Button, Input &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="keyword">import</span> &#123; changeSearchAction &#125; <span class="keyword">from</span> <span class="string">'appRedux/actions/$P/$C'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Search</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">//  搜索</span></span><br><span class="line">  onSearch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getFieldsValue &#125; = <span class="keyword">this</span>.props.form</span><br><span class="line">    <span class="keyword">const</span> value = getFieldsValue()</span><br><span class="line">    <span class="keyword">this</span>.props.changeSearchAction(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 重置搜索</span></span><br><span class="line">  onResetSearch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.props.form.resetFields()</span><br><span class="line">    <span class="keyword">this</span>.props.changeSearchAction(&#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getFieldDecorator &#125; = <span class="keyword">this</span>.props.form</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Form layout=<span class="string">"inline"</span>&gt;</span><br><span class="line">        &lt;Form.Item&gt;</span><br><span class="line">          &#123;getFieldDecorator(<span class="string">'XXX'</span>)(<span class="xml"><span class="tag">&lt;<span class="name">XXXX</span> <span class="attr">placeholder</span>=<span class="string">"XXX"</span> /&gt;</span></span>)&#125;</span><br><span class="line">        &lt;<span class="regexp">/Form.Item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Form.Item&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Button type="primary" htmlType="submit" onClick=&#123;this.onSearch&#125;&gt;</span></span><br><span class="line"><span class="regexp">            搜索</span></span><br><span class="line"><span class="regexp">          &lt;/</span>Button&gt;</span><br><span class="line">          &lt;Button onClick=&#123;<span class="keyword">this</span>.onResetSearch&#125;&gt;重置&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Form.Item&gt;</span><br><span class="line">      &lt;<span class="regexp">/Form&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default connect(</span></span><br><span class="line"><span class="regexp">  () =&gt; (&#123;&#125;),</span></span><br><span class="line"><span class="regexp">  &#123; changeSearchAction &#125;</span></span><br><span class="line"><span class="regexp">)(Form.create()(Search))</span></span><br></pre></td></tr></table></figure>

<p>对应 table.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/containers/$P/$C/table.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; Fragment &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Button, Table &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="keyword">import</span> &#123; changePageAction, xDeleteAction &#125; <span class="keyword">from</span> <span class="string">'appRedux/actions/$P/$C'</span></span><br><span class="line"><span class="keyword">import</span> &#123; DropButtonGroup &#125; <span class="keyword">from</span> <span class="string">'containers/Common'</span></span><br><span class="line"><span class="keyword">import</span> columns <span class="keyword">from</span> <span class="string">'./columns'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TableList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      columns: columns.concat([<span class="keyword">this</span>.action])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击页码触发</span></span><br><span class="line">  onPage = <span class="function">(<span class="params">&#123; current &#125;</span>) =&gt;</span> <span class="keyword">this</span>.props.changePageAction(current)</span><br><span class="line">  action = &#123;</span><br><span class="line">    title: <span class="string">'操作'</span>,</span><br><span class="line">    dataIndex: <span class="string">'id'</span>,</span><br><span class="line">    width: <span class="number">170</span>,</span><br><span class="line">    render: <span class="function">(<span class="params">id, row</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;Fragment&gt;</span><br><span class="line">          &lt;Button</span><br><span class="line">            className=&#123;<span class="string">'gx-mb-0'</span>&#125;</span><br><span class="line">            size=<span class="string">"small"</span></span><br><span class="line">            onClick=&#123;() =&gt; <span class="keyword">this</span>.props.history.push(<span class="string">`/x/x/<span class="subst">$&#123;id&#125;</span>`</span>)&#125;</span><br><span class="line">          &gt;</span><br><span class="line">            详情</span><br><span class="line">          &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">          &lt;DropButtonGroup</span></span><br><span class="line"><span class="regexp">            group=&#123;[</span></span><br><span class="line"><span class="regexp">              &#123;</span></span><br><span class="line"><span class="regexp">                text: ' 编辑',</span></span><br><span class="line"><span class="regexp">                onClick: () =&gt; this.props.history.push(`/x/x/$&#123;id&#125;`)</span></span><br><span class="line"><span class="regexp">              &#125;,</span></span><br><span class="line"><span class="regexp">              &#123;</span></span><br><span class="line"><span class="regexp">                text: '删除',</span></span><br><span class="line"><span class="regexp">                type: 'delete',</span></span><br><span class="line"><span class="regexp">                onClick: () =&gt; this.props.xDeleteAction(id)</span></span><br><span class="line"><span class="regexp">              &#125;</span></span><br><span class="line"><span class="regexp">            ]&#125;</span></span><br><span class="line"><span class="regexp">          /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/Fragment&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    const &#123; tableloading, total, size, current, list &#125; = this.props</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;Table</span></span><br><span class="line"><span class="regexp">        loading=&#123;tableloading&#125;</span></span><br><span class="line"><span class="regexp">        pagination=&#123;&#123;</span></span><br><span class="line"><span class="regexp">          total,</span></span><br><span class="line"><span class="regexp">          pageSize: size,</span></span><br><span class="line"><span class="regexp">          current</span></span><br><span class="line"><span class="regexp">        &#125;&#125;</span></span><br><span class="line"><span class="regexp">        rowKey="id"</span></span><br><span class="line"><span class="regexp">        dataSource=&#123;list&#125;</span></span><br><span class="line"><span class="regexp">        columns=&#123;this.state.columns&#125;</span></span><br><span class="line"><span class="regexp">        onChange=&#123;this.onPage&#125;</span></span><br><span class="line"><span class="regexp">        bordered=&#123;true&#125;</span></span><br><span class="line"><span class="regexp">      /</span>&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  (&#123; <span class="attr">xxxx</span>: &#123; list, tableloading, total, size, current &#125; &#125;) =&gt; (&#123;</span><br><span class="line">    list,</span><br><span class="line">    tableloading,</span><br><span class="line">    total,</span><br><span class="line">    size,</span><br><span class="line">    current</span><br><span class="line">  &#125;),</span><br><span class="line">  &#123;</span><br><span class="line">    changePageAction,</span><br><span class="line">    xDeleteAction</span><br><span class="line">  &#125;</span><br><span class="line">)(TableList)</span><br></pre></td></tr></table></figure>

<p>table 对应的 columns</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/containers/$P/$C/columns.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Tag &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'名称'</span>,</span><br><span class="line">    dataIndex: <span class="string">'key'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'日期'</span>,</span><br><span class="line">    dataIndex: <span class="string">'key'</span>,</span><br><span class="line">    render: <span class="function"><span class="params">v</span> =&gt;</span> (!v ? <span class="literal">null</span> : moment(v).format(<span class="string">'YYYY-MM-DD'</span>))</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'xx'</span>,</span><br><span class="line">    dataIndex: <span class="string">'xx'</span>,</span><br><span class="line">    render: <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;Tag className=<span class="string">"gx-mb-0"</span> color=&#123;value ? <span class="string">'green'</span> : <span class="string">'red'</span>&#125;&gt;</span><br><span class="line">          &#123;value ? <span class="string">'xxx'</span> : <span class="string">'xxx'</span>&#125;</span><br><span class="line">        &lt;<span class="regexp">/Tag&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">]</span></span><br></pre></td></tr></table></figure>

<p>最后路由里配一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $C = asyncComponent(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="comment">/* webpackChunkName:"$C" */</span> <span class="string">'./$C'</span>))</span><br><span class="line">;<span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">match.url</span>&#125;/$<span class="attr">C</span>`&#125; <span class="attr">component</span>=<span class="string">&#123;$C&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="增和改"><a href="#增和改" class="headerlink" title="增和改"></a>增和改</h2><p>上面的只是查，常有的还有增和改</p>
<p>首先还是 api：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/apis/$P.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'./request'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注释</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> xxxx = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    url: <span class="string">''</span>,</span><br><span class="line">    method: <span class="string">''</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>redux 部分，在 constants 中定义一个常量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/constants/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  注释</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> SET_$C_VARIABLE = <span class="string">'SET_$C_VARIABLE'</span></span><br></pre></td></tr></table></figure>

<p>定义 reducer：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/appRedux/reducers/$P/$C</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; SET_$C_VARIABLE &#125; <span class="keyword">from</span> <span class="string">'constants/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  details: <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = initialState, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> SET_$C_VARIABLE: &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, [action.payload.name]: action.payload.value &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer</span><br></pre></td></tr></table></figure>

<p>定义 action：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/appRedux/actions/$P/$C</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; message &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="keyword">import</span> &#123; SET_$C_VARIABLE &#125; <span class="keyword">from</span> <span class="string">'constants/index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; isUndefined &#125; <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"><span class="keyword">import</span> &#123; xxx &#125; <span class="keyword">from</span> <span class="string">'apis/$P'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setReducer = <span class="function">(<span class="params">&#123; name, value &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: SET_$C_VARIABLE,</span><br><span class="line">    payload: &#123; name, value &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 车辆信息新增</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">submitAction</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> xxx(param).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      message.error(err.message ? err.message : <span class="string">'提交失败'</span>)</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (res &amp;&amp; res.code) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res)</span><br><span class="line">    message.success(<span class="string">'提交成功'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 车辆信息更新</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateAction</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> dispatch =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> xxx(param).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      message.error(err.message ? err.message : <span class="string">'更新失败'</span>)</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (res &amp;&amp; res.code) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res)</span><br><span class="line">    dispatch(push(<span class="string">'/xxx/xx'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据ID获取主体信息管理</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getDataByIdAction</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> dispatch =&gt; &#123;</span><br><span class="line">    dispatch(setVariable(&#123; <span class="attr">name</span>: <span class="string">'details'</span>, <span class="attr">value</span>: <span class="literal">null</span> &#125;))</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> xxx(&#123; id &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      message.error(err.message ? err.message : <span class="string">'数据获取失败'</span>)</span><br><span class="line">      <span class="keyword">return</span> err</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (isUndefined(res) || (res &amp;&amp; res.code)) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res)</span><br><span class="line">    dispatch(setVariable(&#123; <span class="attr">name</span>: <span class="string">'details'</span>, <span class="attr">value</span>: res &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 store 里添加 reducer</p>
<p>视图部分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/containers/$P/$C/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Button, Empty &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="keyword">import</span> &#123; isUndefined &#125; <span class="keyword">from</span> <span class="string">'lodash'</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; SimpleForm &#125; <span class="keyword">from</span> <span class="string">'components/Form'</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapFileListToUrl, mapUrlToFileList &#125; <span class="keyword">from</span> <span class="string">'components/Upload'</span></span><br><span class="line"><span class="keyword">import</span> PageBackContent <span class="keyword">from</span> <span class="string">'components/PageBackContent'</span></span><br><span class="line"><span class="keyword">import</span> &#123; formItem &#125; <span class="keyword">from</span> <span class="string">'./formItem'</span></span><br><span class="line"><span class="keyword">import</span> &#123; onRouterChange &#125; <span class="keyword">from</span> <span class="string">'../../../navigation'</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  getDataByIdAction,</span><br><span class="line">  submitAction,</span><br><span class="line">  updateAction</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'appRedux/actions/$P/$C'</span></span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">'./index.css'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间字段</span></span><br><span class="line"><span class="keyword">const</span> timeFields = [<span class="string">''</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddEditForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      isAdd: <span class="literal">true</span>,</span><br><span class="line">      id: <span class="literal">null</span>,</span><br><span class="line">      getDataFail: <span class="literal">false</span>,</span><br><span class="line">      hide: <span class="literal">true</span>,</span><br><span class="line">      isSubmit: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      match: &#123;</span><br><span class="line">        params: &#123; id &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      getDataByIdAction</span><br><span class="line">    &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">    onRouterChange(<span class="string">'/xxx/xxx'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">isAdd</span>: !<span class="keyword">this</span>.state.isAdd &#125;)</span><br><span class="line">      <span class="keyword">this</span>.resetFields()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是编辑页面，取得页面初始值</span></span><br><span class="line">    <span class="keyword">if</span> (isUndefined(id)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">hide</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">isAdd</span>: <span class="literal">false</span>, id &#125;)</span><br><span class="line">      getDataByIdAction(id)</span><br><span class="line">        .catch(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123; <span class="attr">getDataFail</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">        .finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.setEdit()</span><br><span class="line">          <span class="keyword">this</span>.setState(&#123; <span class="attr">hide</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setEdit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; datas &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换时间格式</span></span><br><span class="line">    datas = SimpleForm.timeToMoment(datas, timeFields)</span><br><span class="line">    datas.uploadPhotos = mapUrlToFileList(datas.uploadPhotos)</span><br><span class="line">    SimpleForm.setFieldsValue(datas, <span class="keyword">this</span>.formRef)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  submitDataFormat = <span class="function"><span class="params">values</span> =&gt;</span> &#123;</span><br><span class="line">    values = SimpleForm.momentFormat(values, timeFields)</span><br><span class="line">    values = SimpleForm.undefinedToNull(values)</span><br><span class="line">    values.uploadPhotos = mapFileListToUrl(values.uploadPhotos, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> values</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 表单提交</span></span><br><span class="line">  onClickSubmit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; submitAction, updateAction &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">const</span> &#123; id, isAdd, isSubmit &#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">const</span> &#123; validateFieldsAndScroll &#125; = <span class="keyword">this</span>.formRef</span><br><span class="line">    <span class="keyword">if</span> (isSubmit) <span class="keyword">return</span></span><br><span class="line">    validateFieldsAndScroll(<span class="function">(<span class="params">err, values</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">isSubmit</span>: <span class="literal">true</span> &#125;, () =&gt; &#123;</span><br><span class="line">        values = <span class="keyword">this</span>.submitDataFormat(values)</span><br><span class="line">        <span class="keyword">if</span> (isAdd) &#123;</span><br><span class="line">          <span class="comment">// 新增提交</span></span><br><span class="line">          submitAction(values)</span><br><span class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.resetFields())</span><br><span class="line">            .finally(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.setState(&#123; <span class="attr">isSubmit</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 编辑提交</span></span><br><span class="line">          values.id = id</span><br><span class="line">          updateAction(values).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123; <span class="attr">isSubmit</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  resetFields = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; resetFields &#125; = <span class="keyword">this</span>.formRef</span><br><span class="line">    resetFields()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; token &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">const</span> &#123; getDataFail, hide, isAdd, isSubmit &#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          style=&#123;&#123; <span class="attr">display</span>: hide ? <span class="string">'none'</span> : <span class="string">'block'</span> &#125;&#125;</span><br><span class="line">          className=&#123;style.container&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;PageBackContent title=&#123;<span class="string">`xxx<span class="subst">$&#123;isAdd ? <span class="string">'新增'</span> : <span class="string">'编辑'</span>&#125;</span>`</span>&#125;&gt;</span><br><span class="line">            &#123;getDataFail &amp;&amp; (</span><br><span class="line">              &lt;Empty style=&#123;&#123; <span class="attr">padding</span>: <span class="string">'50px 0'</span> &#125;&#125; description=<span class="string">"数据异常"</span> /&gt;</span><br><span class="line">            )&#125;</span><br><span class="line">            &lt;div style=&#123;&#123; <span class="attr">display</span>: getDataFail ? <span class="string">'none'</span> : <span class="string">'block'</span> &#125;&#125;&gt;</span><br><span class="line">              &lt;SimpleForm</span><br><span class="line">                model=<span class="string">"divide"</span></span><br><span class="line">                itemCol=&#123;<span class="number">3</span>&#125;</span><br><span class="line">                wrappedComponentRef=&#123;formRef =&gt;</span><br><span class="line">                  formRef &amp;&amp;</span><br><span class="line">                  !<span class="keyword">this</span>.formRef &amp;&amp;</span><br><span class="line">                  (<span class="keyword">this</span>.formRef = formRef.props.form)</span><br><span class="line">                &#125;</span><br><span class="line">                items=&#123;formItem(&#123; token &#125;)&#125;</span><br><span class="line">              /&gt;</span><br><span class="line">              &lt;div className=&#123;style.submit&#125;&gt;</span><br><span class="line">                &lt;Button</span><br><span class="line">                  loading=&#123;isSubmit&#125;</span><br><span class="line">                  className=&#123;style.submitBtn&#125;</span><br><span class="line">                  type=<span class="string">"primary"</span></span><br><span class="line">                  onClick=&#123;<span class="keyword">this</span>.onClickSubmit&#125;</span><br><span class="line">                &gt;</span><br><span class="line">                  &#123;isAdd ? <span class="string">'提交'</span> : <span class="string">'确认修改'</span>&#125;</span><br><span class="line">                &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>div&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>PageBackContent&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">&#123; runtime: &#123; token &#125;, xxx: &#123; details &#125; &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  token,</span><br><span class="line">  datas: details</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  &#123;</span><br><span class="line">    getDataByIdAction,</span><br><span class="line">    submitAction,</span><br><span class="line">    updateAction</span><br><span class="line">  &#125;</span><br><span class="line">)(AddEditForm)</span><br></pre></td></tr></table></figure>

<p>对应 index.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** src/containers/$P/$C/index.js **/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">  .formItemWidth &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 100%;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.uploadLabel</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: right;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.submit</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    .submitBtn &#123;</span><br><span class="line">      <span class="selector-tag">width</span>: 150<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对应 formItem：</p>
<p>一级 formItem：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; DatePicker &#125; <span class="keyword">from</span> <span class="string">'antd'</span></span><br><span class="line"><span class="keyword">import</span> &#123; EWPicturesWall &#125; <span class="keyword">from</span> <span class="string">'components/Upload'</span></span><br><span class="line"><span class="comment">// import &#123; xx &#125; from 'containers/Common/'</span></span><br><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">'./index.css'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formItem = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; token &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'名称'</span>,</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">      key: <span class="string">'xx'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'日期'</span>,</span><br><span class="line">      key: <span class="string">'xx'</span>,</span><br><span class="line">      component: (</span><br><span class="line">        &lt;DatePicker placeholder=<span class="string">"日期"</span> className=&#123;style.formItemWidth&#125; /&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'上传照片'</span>,</span><br><span class="line">      key: <span class="string">'xxx'</span>,</span><br><span class="line">      col: <span class="number">24</span>,</span><br><span class="line">      layout: &#123;</span><br><span class="line">        labelCol: &#123; <span class="attr">span</span>: <span class="number">3</span> &#125;,</span><br><span class="line">        wrapperCol: &#123; <span class="attr">span</span>: <span class="number">9</span> &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      component: (</span><br><span class="line">        &lt;EWPicturesWall token=&#123;token&#125; data=&#123;&#123; <span class="attr">model</span>: <span class="string">'xxx'</span> &#125;&#125; limit=&#123;<span class="number">1</span>&#125; /&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; formItem &#125;</span><br></pre></td></tr></table></figure>

<p>二级 formItem：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formItem = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; token &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    &#123;</span><br><span class="line">      title: <span class="string">'必填信息'</span>,</span><br><span class="line">      children: []</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title>react脚手架</title>
    <url>/2019/04/12/react%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    <content><![CDATA[<p>最近有机会研究了一下<code>wieldy-react</code>，也算是颇有收获，结合之前创建脚手架的经验，个人依据<code>wieldy-react</code>尝试创建了一个<code>react</code>工程。</p>
<p>工程目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src                               &#x2F;&#x2F; 源码根目录</span><br><span class="line">|   index.js                      &#x2F;&#x2F; 主入口</span><br><span class="line">|   NextApp.js                    &#x2F;&#x2F; 次入口</span><br><span class="line">|   serviceWorker.js</span><br><span class="line">|</span><br><span class="line">+---apis</span><br><span class="line">|       api.js                     &#x2F;&#x2F; 接口</span><br><span class="line">|</span><br><span class="line">+---appRedux                       &#x2F;&#x2F; 状态管理</span><br><span class="line">|   +---actions</span><br><span class="line">|   |       Auth.js</span><br><span class="line">|   |       Chat.js</span><br><span class="line">|   |       index.js</span><br><span class="line">|   |</span><br><span class="line">|   +---reducers</span><br><span class="line">|   |       Auth.js</span><br><span class="line">|   |       Chat.js</span><br><span class="line">|   |       index.js</span><br><span class="line">|   |</span><br><span class="line">|   +---sagas</span><br><span class="line">|   |       Auth.js</span><br><span class="line">|   |       Chat.js</span><br><span class="line">|   |       index.js</span><br><span class="line">|   |</span><br><span class="line">|   \---store                      &#x2F;&#x2F; store</span><br><span class="line">|           index.js</span><br><span class="line">|</span><br><span class="line">+---assets                         &#x2F;&#x2F; 资源文件夹</span><br><span class="line">|   \---images                     &#x2F;&#x2F; 图片资源</span><br><span class="line">+---components                     &#x2F;&#x2F; 无状态组件文件夹</span><br><span class="line">|   \---CircularProgress</span><br><span class="line">|           index.js</span><br><span class="line">|</span><br><span class="line">+---constants                      &#x2F;&#x2F; 常量配置</span><br><span class="line">|       ActionTypes.js</span><br><span class="line">|       DomainSetting.js</span><br><span class="line">|</span><br><span class="line">+---containers                     &#x2F;&#x2F; 有状态组件文件夹</span><br><span class="line">|   |   SignIn.js</span><br><span class="line">|   |   Socket.js</span><br><span class="line">|   |</span><br><span class="line">|   +---App</span><br><span class="line">|   |       index.js</span><br><span class="line">|   |       MainApp.js</span><br><span class="line">|   |</span><br><span class="line">|   +---Chat</span><br><span class="line">|   |       FriendList.js</span><br><span class="line">|   |       index.js</span><br><span class="line">|   |</span><br><span class="line">|   \---Sidebar</span><br><span class="line">|           index.js</span><br><span class="line">|</span><br><span class="line">+---helper                        &#x2F;&#x2F; 工具函数</span><br><span class="line">|       asyncComponent.js         &#x2F;&#x2F; 异步加载组件</span><br><span class="line">|</span><br><span class="line">+---routes                        &#x2F;&#x2F; 页面路由以及页面组件</span><br><span class="line">|   |   index.js</span><br><span class="line">|   |</span><br><span class="line">|   \---Chat</span><br><span class="line">|           index.js</span><br><span class="line">|</span><br><span class="line">\---style                         &#x2F;&#x2F; 样式</span><br><span class="line">    |   style.less</span><br><span class="line">    |</span><br><span class="line">    +---base                      &#x2F;&#x2F; 基础样式</span><br><span class="line">    |       base.less</span><br><span class="line">    |       index.less</span><br><span class="line">    |</span><br><span class="line">    +---global                    &#x2F;&#x2F; 全局样式</span><br><span class="line">    |       index.less</span><br><span class="line">    |       mixin.less</span><br><span class="line">    |       variables.less</span><br><span class="line">    |</span><br><span class="line">    \---layout                    &#x2F;&#x2F; 布局样式</span><br><span class="line">            ant-layout.less       &#x2F;&#x2F; antd样式修改</span><br><span class="line">            index.less</span><br></pre></td></tr></table></figure>

<p>相比较我之前搭建的脚手架主要的不同点主要有如下几点：</p>
<ul>
<li>将路由集成到了 redux 之中</li>
<li>组件拆分到了三个目录当中，分别为<code>components</code>，<code>containers</code>，<code>routes</code>，分别存放无状态组件，有状态容器和路由。</li>
</ul>
<h2 id="局部热更新"><a href="#局部热更新" class="headerlink" title="局部热更新"></a>局部热更新</h2><p>虽然<code>Create React App</code>已经实现了热更新，但每次修改之后都需要整个重新刷新页面，但很多时候我们只修改了局部的一小块，刷新整个页面会造成不必要的性能浪费，因此可以使用<code>react-hot-loader</code>来实现局部刷新。</p>
<p>总体来说，这套开发模式比我之前的个人认为是一种进步，如果对具体细节感兴趣，<a href="https://github.com/1016482011/chat/tree/save/template" target="_blank" rel="noopener">请移步</a></p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>rc-tree 源码解读</title>
    <url>/2019/02/13/treeInReact/</url>
    <content><![CDATA[<hr>
<p>工作中接到一个需求是从模型文件 glb 文件中提取其属性，在页面中通过树形结构来做展示，数据格式大致如下：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> dataType &#123;</span><br><span class="line">  autoUpdate:<span class="built_in">boolean</span></span><br><span class="line">  background: <span class="literal">null</span></span><br><span class="line">  castShadow: <span class="built_in">boolean</span></span><br><span class="line">  uuid: <span class="built_in">string</span></span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">  userData: &#123;[key:<span class="built_in">string</span>]: <span class="built_in">any</span>&#125;</span><br><span class="line">  children?: data[]</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="数据精简"><a href="#数据精简" class="headerlink" title="数据精简"></a>数据精简</h2><p>这是通过 threejs 解析之后数据，虽然得到的已经是一个树形结构的数据，但在数据中有许多与展示无关的数据，拿到数据后的第一反应是将数据做一下精简，只留下页面展示需要的数据。</p>
<p>可通过如下函数对数据进行精简：</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> mapTree &#123;</span><br><span class="line">  name: <span class="built_in">any</span></span><br><span class="line">  children?: mapTree[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mapTree = (data: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;[]): mapTree[] =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> data.map(<span class="function">(<span class="params">item: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.children) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        name: item.name,</span><br><span class="line">        children: mapTree(item.children)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      name: item.name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来就是如何展示的问题了，考虑到如果自己从零开始造轮子从工期和质量上考虑都不好，直接使用 rc-tree 的话要完整实现 ui 提出来的样式和功能比较麻烦，有些情况下还会出现无法实现的情况，综合考量一下决定细读 rc-tree 的源码，将 rc-tree 移植到项目中，在移植过程中结合项目需求再对代码做一些改动。</p>
<hr>
<h2 id="主体目录结构"><a href="#主体目录结构" class="headerlink" title="主体目录结构"></a>主体目录结构</h2><p>rc-tree 的主要文件有<code>contextTypes</code>、<code>Tree</code>、<code>TreeNode</code>、<code>util</code>4 个文件，<code>Tree</code>是外层树文件，主要负责状态管理和渲染，<code>TreeNode</code>是树节点文件，主要处理单个节点的事件和渲染，<code>contextTypes</code>是<code>react context</code>的类型定义文件，<code>util</code>主要是一些工具函数。</p>
<hr>
<h2 id="外部函数引用"><a href="#外部函数引用" class="headerlink" title="外部函数引用"></a>外部函数引用</h2><h3 id="toArray"><a href="#toArray" class="headerlink" title="toArray"></a>toArray</h3><p>此函数用来保证子节点的 key 不变，并且用来保证正确的返回单个节点的情况，此种情况可以避免 key 不检查的情况</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _react = <span class="built_in">require</span>(<span class="string">'react'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _react2 = _interopRequireDefault(_react)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_interopRequireDefault</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="attr">default</span>: obj &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params">children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ret = []</span><br><span class="line">  _react2[<span class="string">'default'</span>].Children.forEach(children, <span class="function"><span class="keyword">function</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">    ret.push(c)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> toArray</span><br></pre></td></tr></table></figure>

<p>注：React.Children 是一个工具类，它提供了对组件不透明数据结构 this.props.children 的处理功能。</p>
<p>React.Children.forEach ，此方法是在每个直接子元素（children）上调用 fn 函数。如果 children 是一个内嵌的对象或者数组，它将被遍历（不会传入容器对象到 fn 中）。如果 children 参数是 null 或者 undefined，那么返回 null 或者 undefined 而不是一个空对象。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">React.Children.forEach(object children, function fn [, object thisArg])</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Tree-jsx"><a href="#Tree-jsx" class="headerlink" title="Tree.jsx"></a>Tree.jsx</h2><h3 id="getDerivedStateFromProps"><a href="#getDerivedStateFromProps" class="headerlink" title="getDerivedStateFromProps"></a>getDerivedStateFromProps</h3><p>Tree 组件中的<code>getDerivedStateFromProps</code>是比较核心的一块，此生命周期主要用来接管父级组件传过来的数据以及一些内部状态的更新。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Tree.tsx</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">needSync</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    (!prevProps &amp;&amp; name <span class="keyword">in</span> props) ||</span><br><span class="line">    (prevProps &amp;&amp; prevProps[name] !== props[name])</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此函数用来检查 props 中指定属性是否发生变化以此避免掉不必要的更新。</p>
<p>getDerivedStateFromProps 中主要分为<code>Tree Node</code>、<code>checkedKeys</code>四个模块。</p>
<p>首先是<code>Tree Node</code>模块，这里用到了不少<code>util</code>里的函数。简单过一下</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// util.ts</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTreeNode</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  node: <span class="literal">null</span> | <span class="literal">undefined</span> | &#123; <span class="keyword">type</span>?: &#123; isTreeNode?: <span class="built_in">boolean</span> &#125; &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node &amp;&amp; node.type &amp;&amp; node.type.isTreeNode</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNodeChildren</span>(<span class="params">children: types.treeNode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> toArray(children).filter(isTreeNode)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>getNodeChildren</code>函数用来过滤掉非 tree 节点的元素，注意<code>node.type.isTreeNode</code>中的<code>isTreeNode</code>是在<code>TreeNode</code>组件中的自定义属性，值为<code>1</code>。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// util.ts</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverseTreeNodes</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  treeNodes: types.treeNode,</span></span></span><br><span class="line"><span class="function"><span class="params">  callback: (item: types.traverseTreeNodesData) =&gt; <span class="built_in">void</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">processNode</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    node: React.ReactElement&lt;<span class="built_in">any</span>&gt; | <span class="literal">null</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    index: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    parent: &#123; node: React.ReactElement&lt;<span class="built_in">any</span>&gt; | <span class="literal">null</span>; pos: <span class="built_in">string</span> &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> children = node ? node.props.children : treeNodes</span><br><span class="line">    <span class="keyword">const</span> pos = node ? getPosition(parent.pos, index) : <span class="string">'0'</span></span><br><span class="line">    <span class="keyword">const</span> childList = getNodeChildren(children)</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">      <span class="keyword">const</span> data: types.traverseTreeNodesData = &#123;</span><br><span class="line">        node,</span><br><span class="line">        index,</span><br><span class="line">        pos,</span><br><span class="line">        key: node.key || pos,</span><br><span class="line">        parentPos: parent.node ? parent.pos : <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">      callback(data)</span><br><span class="line">    &#125;</span><br><span class="line">    Children.forEach(childList, <span class="function">(<span class="params">subNode, subIndex</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> subNode !== <span class="string">'string'</span> &amp;&amp; <span class="keyword">typeof</span> subNode !== <span class="string">'number'</span>)</span><br><span class="line">        processNode(subNode, subIndex, &#123; node, pos &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  processNode(<span class="literal">null</span>, <span class="number">0</span>, &#123;&#125; <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertTreeToEntities</span>(<span class="params">treeNodes: types.treeNode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> posEntities: &#123; [key: <span class="built_in">string</span>]: types.treeToEntities &#125; = &#123;&#125; <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">  <span class="keyword">const</span> keyEntities: &#123; [key: <span class="built_in">string</span>]: types.treeToEntities &#125; = &#123;&#125; <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">  <span class="keyword">let</span> wrapper = &#123;</span><br><span class="line">    posEntities,</span><br><span class="line">    keyEntities</span><br><span class="line">  &#125;</span><br><span class="line">  traverseTreeNodes(treeNodes, <span class="function">(<span class="params">item: types.traverseTreeNodesData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; node, index, pos, key, parentPos &#125; = item</span><br><span class="line">    <span class="keyword">const</span> entity: types.traverseTreeEntityData = &#123; node, index, key, pos &#125;</span><br><span class="line">    posEntities[pos] = entity</span><br><span class="line">    keyEntities[key] = entity</span><br><span class="line">    entity.parent = parentPos &amp;&amp; posEntities[parentPos]</span><br><span class="line">    <span class="keyword">if</span> (entity.parent) &#123;</span><br><span class="line">      entity.parent.children = entity.parent.children || []</span><br><span class="line">      entity.parent.children.push(entity)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> wrapper</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>traverseTreeNodes</code>用于递归出所传入节点下的所有子节点，并通过<code>React.Children.forEach</code>得出子节点的深度，再函数<code>convertTreeToEntities</code>将树中的节点展平，将封过后的结果返回给外界使用。</p>
<p>再返回 Tree 组件的 <code>Tree node</code>部分</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Tree.tsx</span></span><br><span class="line"><span class="keyword">let</span> treeNode: types.treeNode = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查children是否发生了变化，如果变化了更新state</span></span><br><span class="line"><span class="keyword">if</span> (needSync(<span class="string">'children'</span>)) &#123;</span><br><span class="line">  treeNode = toArray(props.children)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (treeNode) &#123;</span><br><span class="line">  newState.treeNode = treeNode</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算出节点的实体数据以便快速匹配</span></span><br><span class="line">  <span class="keyword">const</span> entitiesMap = convertTreeToEntities(treeNode)</span><br><span class="line">  newState.posEntities = entitiesMap.posEntities</span><br><span class="line">  newState.keyEntities = entitiesMap.keyEntities</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处部分简单的调用了<code>convertTreeToEntities</code>方法，并把得到的数据存到 state 中，<code>let treeNode: types.treeNode = null</code>说明可以出此操作只会在 children 发生变化才会触发。</p>
<p>下面是<code>checkedKeys</code>，这一块保证外部状态变化之后，能够及时检查选中的 key</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Tree.tsx</span></span><br><span class="line"><span class="keyword">let</span> checkedKeyEntity: &#123;</span><br><span class="line">  checkedKeys: <span class="built_in">string</span>[]</span><br><span class="line">  halfCheckedKeys: <span class="built_in">string</span>[]</span><br><span class="line">&#125; | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">if</span> (treeNode) &#123;</span><br><span class="line">  checkedKeyEntity = &#123;</span><br><span class="line">    checkedKeys: prevState.checkedKeys,</span><br><span class="line">    halfCheckedKeys: prevState.halfCheckedKeys</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (checkedKeyEntity) &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; checkedKeys = [], halfCheckedKeys = [] &#125; = checkedKeyEntity</span><br><span class="line">  <span class="keyword">const</span> conductKeys = conductCheck(checkedKeys, <span class="literal">true</span>, keyEntities)</span><br><span class="line">  checkedKeys = conductKeys.checkedKeys</span><br><span class="line">  halfCheckedKeys = conductKeys.halfCheckedKeys</span><br><span class="line">  newState.checkedKeys = checkedKeys</span><br><span class="line">  newState.halfCheckedKeys = halfCheckedKeys</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果 treeNode 发生变化，及时检查已选和半选择的 keys</p>
<p>最后通过返回 <code>newState</code> 更新 <code>Tree</code>组件的内部状态</p>
<h3 id="renderTreeNode"><a href="#renderTreeNode" class="headerlink" title="renderTreeNode"></a>renderTreeNode</h3><p><code>renderTreeNode</code>是一个比较重要的函数，主要负责节点的渲染</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Tree.tsx</span></span><br><span class="line">renderTreeNode = (</span><br><span class="line">  child: React.ReactElement&lt;Props&gt;,</span><br><span class="line">  index: <span class="built_in">number</span>,</span><br><span class="line">  level = <span class="number">0</span></span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; expandedKeys, halfCheckedKeys, selectedKeys &#125; = <span class="keyword">this</span>.state</span><br><span class="line">  <span class="keyword">const</span> pos = getPosition(level, index)</span><br><span class="line">  <span class="keyword">const</span> key = child.key || pos</span><br><span class="line">  <span class="keyword">const</span> newProps = &#123;</span><br><span class="line">    key,</span><br><span class="line">    eventKey: key,</span><br><span class="line">    expanded: expandedKeys.indexOf(key) !== <span class="number">-1</span>,</span><br><span class="line">    pos,</span><br><span class="line">    checked: <span class="keyword">this</span>.isKeyChecked(key),</span><br><span class="line">    halfChecked: halfCheckedKeys.indexOf(key) !== <span class="number">-1</span>,</span><br><span class="line">    selected: selectedKeys.indexOf(key) !== <span class="number">-1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> React.cloneElement&lt;Props&gt;(child, newProps)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此函数的<code>newProps</code>较为重要，节点的主要状态，像选中、半选中、展开等信息均在此处注入到了<code>props</code>里</p>
<p><code>Tree</code>先暂时告一段落，下面是转到<code>TreeNode</code>组件，在这里会提到一些<code>Tree</code>中的函数</p>
<hr>
<h2 id="TreeNode"><a href="#TreeNode" class="headerlink" title="TreeNode"></a>TreeNode</h2><p><code>TreeNode</code>从<code>render</code>函数开始解读，代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; TreeNode.tsx</span><br><span class="line">public render() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &#123;this.renderSwitcher()&#125;</span><br><span class="line">      &#123;this.renderCheckbox()&#125;</span><br><span class="line">      &#123;this.renderSelector()&#125;</span><br><span class="line">      &#123;this.renderChildren()&#125;</span><br><span class="line">    &lt;&#x2F;li&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要分为四块，<code>renderSwitcher</code>是控制列表展开与折叠的按钮，<code>renderCheckbox</code>是<code>checkbox</code>框，<code>renderSelector</code>是列表的主体内容部分，同时用作选择区，<code>renderChildren</code>如果此节点存在子节点的情况下，使用此函数来进行渲染子元素列表。</p>
<p>在解读源码时，我删除了样式部分的内容，以便阅读。所以最终效果会有点 low</p>
<h3 id="renderSwitcher"><a href="#renderSwitcher" class="headerlink" title="renderSwitcher"></a>renderSwitcher</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; TreeNode.tsx</span><br><span class="line">onExpand &#x3D; (e: React.MouseEvent&lt;HTMLSpanElement, MouseEvent&gt;) &#x3D;&gt; &#123;</span><br><span class="line">  const &#123;</span><br><span class="line">    rcTree: &#123; onNodeExpand &#125;</span><br><span class="line">  &#125; &#x3D; this.context</span><br><span class="line">  onNodeExpand(e, this)</span><br><span class="line">&#125;</span><br><span class="line">renderSwitcher &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  return &lt;span onClick&#x3D;&#123;this.onExpand&#125;&gt;点击展开&lt;&#x2F;span&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码比较简单，主要功能实现代码在于<code>onNodeExpand</code>，这是在<code>Tree</code>组件内实现的代码</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Tree.tsx</span></span><br><span class="line">onNodeExpand = (</span><br><span class="line">  e: React.MouseEvent&lt;HTMLSpanElement, MouseEvent&gt;,</span><br><span class="line">  treeNode: React.ReactElement&lt;Props&gt;</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; expandedKeys &#125; = <span class="keyword">this</span>.state</span><br><span class="line">  <span class="keyword">const</span> &#123; eventKey, expanded &#125; = treeNode.props</span><br><span class="line">  <span class="keyword">const</span> targetExpanded = !expanded</span><br><span class="line">  <span class="keyword">if</span> (targetExpanded) &#123;</span><br><span class="line">    expandedKeys = arrAdd(expandedKeys, eventKey)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    expandedKeys = arrDel(expandedKeys, eventKey)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.setUncontrolledState(&#123; expandedKeys &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>eventKey</code>是当前选中节点的 key，<code>expanded</code>是当前展开的状态，如果<code>expanded</code>为 true，则<code>expandedKeys</code>添加<code>eventKey</code>，反之删除<code>eventKey</code>，最后更新到<code>state</code>之中。</p>
<h3 id="renderCheckbox"><a href="#renderCheckbox" class="headerlink" title="renderCheckbox"></a>renderCheckbox</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; TreeNode.tsx</span><br><span class="line">onCheck &#x3D; (e: React.MouseEvent&lt;HTMLSpanElement, MouseEvent&gt;) &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; checked &#125; &#x3D; this.props</span><br><span class="line">  const &#123;</span><br><span class="line">    rcTree: &#123; onNodeCheck &#125;</span><br><span class="line">  &#125; &#x3D; this.context</span><br><span class="line">  e.preventDefault()</span><br><span class="line">  const targetChecked &#x3D; !checked</span><br><span class="line">  onNodeCheck(e, this, targetChecked)</span><br><span class="line">&#125;</span><br><span class="line">renderCheckbox &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; checked, halfChecked &#125; &#x3D; this.props</span><br><span class="line">  return (</span><br><span class="line">    &lt;span onClick&#x3D;&#123;this.onCheck&#125;&gt;</span><br><span class="line">      &#123;checked ? &#39;选中|&#39; : &#39;未选中|&#39;&#125;</span><br><span class="line">      &#123;halfChecked ? &#39;半选中|&#39; : &#39;未半选中|&#39;&#125;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与<code>renderSwitcher</code>一样，此处仅负责渲染，具体的功能由<code>Tree</code>组件中的<code>onNodeCheck</code>实现</p>
<p>在<code>onNodeCheck</code>中使用的<code>conductCheck</code>是一个比较重要的函数</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">conductCheck</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  keyList: <span class="built_in">string</span>[],</span></span></span><br><span class="line"><span class="function"><span class="params">  isCheck: <span class="built_in">boolean</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">  keyEntities: types.traverseTreeEntityData,</span></span></span><br><span class="line"><span class="function"><span class="params">  checkStatus: types.checkStatus = &#123;&#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明两个临时变量用来标识哪些key已经被选中或半选中</span></span><br><span class="line">  <span class="keyword">const</span> checkedKeys: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">boolean</span> &#125; = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> halfCheckedKeys: &#123; [key: <span class="built_in">string</span>]: <span class="built_in">boolean</span> &#125; = &#123;&#125; <span class="comment">// 记录子节点被选中的key(包括子节点半选中)</span></span><br><span class="line">    <span class="comment">// 将已选中或半选中的值记录下来</span></span><br><span class="line">  ;<span class="function">(<span class="params">checkStatus.checkedKeys || []</span>).<span class="params">forEach</span>(<span class="params">(<span class="params">key: <span class="built_in">any</span></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    checkedKeys[key] = <span class="literal">true</span></span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;</span>)</span></span><br><span class="line"><span class="function">  ;(<span class="params">checkStatus.halfCheckedKeys || []</span>).<span class="params">forEach</span>(<span class="params">(<span class="params">key: <span class="built_in">any</span></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    halfCheckedKeys[key] = <span class="literal">true</span></span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;</span>)</span></span><br><span class="line"><span class="function">  <span class="params">function</span> <span class="params">conductUp</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params">checkedKeys[key] === isCheck</span>) <span class="params">return</span></span></span><br><span class="line"><span class="function">    <span class="params">const</span> <span class="params">entity</span> = <span class="params">keyEntities</span>[<span class="params">key</span>]</span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params">!entity</span>) <span class="params">return</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="params">const</span> &#123; <span class="params">children</span>, <span class="params">parent</span>, <span class="params">node</span> &#125; = <span class="params">entity</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params">isCheckDisabled(<span class="params">node</span>)</span>) <span class="params">return</span></span></span><br><span class="line"><span class="function">    <span class="params">let</span> <span class="params">everyChildChecked</span> = <span class="params">true</span></span></span><br><span class="line"><span class="function">    <span class="params">let</span> <span class="params">someChildChecked</span> = <span class="params">false</span></span></span><br><span class="line"><span class="function">    ;(<span class="params">children || []</span>)</span></span><br><span class="line"><span class="function">      .<span class="params">filter</span>(<span class="params">(<span class="params">child: <span class="built_in">any</span></span>) =&gt; !isCheckDisabled(<span class="params">child.node</span>)</span>)</span></span><br><span class="line"><span class="function">      .<span class="params">forEach</span>(<span class="params">(<span class="params">&#123; key: childKey &#125;: <span class="built_in">any</span></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="comment">// 查看子元素是否被选中</span></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">const</span> childChecked = checkedKeys[childKey]</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="comment">// 查看子元素是否被半选中</span></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">const</span> childHalfChecked = halfCheckedKeys[childKey]</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="comment">// 只要有一个子元素被选中或者半选中，当前父元素即处于半选中状态</span></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">if</span> (<span class="params">childChecked || childHalfChecked</span>) someChildChecked = <span class="literal">true</span></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="comment">// 如果子元素存在一个未被选中则`everyChildChecked`设为`false`，即属于半选中状态</span></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">if</span> (<span class="params">!childChecked</span>) everyChildChecked = <span class="literal">false</span></span></span></span><br><span class="line"><span class="function"><span class="params">      &#125;</span>)</span></span><br><span class="line"><span class="function">    // <span class="params">Update</span> <span class="params">checked</span> <span class="params">status</span></span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params">isCheck</span>) &#123;</span></span><br><span class="line"><span class="function">      // 选中状态下执行</span></span><br><span class="line"><span class="function">      <span class="params">checkedKeys</span>[<span class="params">key</span>] = <span class="params">everyChildChecked</span></span></span><br><span class="line"><span class="function">    &#125; <span class="params">else</span> &#123;</span></span><br><span class="line"><span class="function">      // 取消状态下执行</span></span><br><span class="line"><span class="function">      <span class="params">checkedKeys</span>[<span class="params">key</span>] = <span class="params">false</span></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    <span class="params">halfCheckedKeys</span>[<span class="params">key</span>] = <span class="params">someChildChecked</span></span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params">parent</span>) &#123;</span></span><br><span class="line"><span class="function">      <span class="params">conductUp</span>(<span class="params">parent.key</span>)</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  <span class="params">function</span> <span class="params">conductDown</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params">checkedKeys[key] === isCheck</span>) <span class="params">return</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="params">const</span> <span class="params">entity</span> = <span class="params">keyEntities</span>[<span class="params">key</span>]</span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params">!entity</span>) <span class="params">return</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="params">const</span> &#123; <span class="params">children</span>, <span class="params">node</span> &#125; = <span class="params">entity</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params">isCheckDisabled(<span class="params">node</span>)</span>) <span class="params">return</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="params">checkedKeys</span>[<span class="params">key</span>] = <span class="params">isCheck</span></span></span><br><span class="line"><span class="function">    ;(<span class="params">children || []</span>).<span class="params">forEach</span>(<span class="params">(<span class="params">child: <span class="built_in">any</span></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      conductDown(<span class="params">child.key</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span>)</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  <span class="params">function</span> <span class="params">conduct</span>(<span class="params">key: <span class="built_in">string</span></span>) &#123;</span></span><br><span class="line"><span class="function">    // 判断传入的<span class="params">key</span>是否在列表里</span></span><br><span class="line"><span class="function">    <span class="params">const</span> <span class="params">entity</span> = <span class="params">keyEntities</span>[<span class="params">key</span>]</span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params">!entity</span>) &#123;</span></span><br><span class="line"><span class="function">      <span class="params">console</span>.<span class="params">warn</span>(<span class="params">`'$&#123;key&#125;' does not exist <span class="keyword">in</span> the tree.`</span>)</span></span><br><span class="line"><span class="function">      <span class="params">return</span></span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">    <span class="params">const</span> &#123; <span class="params">children</span>, <span class="params">parent</span>, <span class="params">node</span> &#125; = <span class="params">entity</span></span></span><br><span class="line"><span class="function">    // 将传入的<span class="params">key</span>设为已选中</span></span><br><span class="line"><span class="function">    <span class="params">checkedKeys</span>[<span class="params">key</span>] = <span class="params">isCheck</span></span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params">isCheckDisabled(<span class="params">node</span>)</span>)</span></span><br><span class="line"><span class="function">      <span class="params">return</span> // 读取当前选中元素的子元素，过滤掉不可选节点</span></span><br><span class="line"><span class="function">    ;(<span class="params">children || []</span>)</span></span><br><span class="line"><span class="function">      .<span class="params">filter</span>(<span class="params">(<span class="params">child: <span class="built_in">any</span></span>) =&gt; !isCheckDisabled(<span class="params">child.node</span>)</span>)</span></span><br><span class="line"><span class="function">      .<span class="params">forEach</span>(<span class="params">(<span class="params">child: <span class="built_in">any</span></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="comment">// 此函数递归出所有子节点，并将其设为选中状态</span></span></span></span><br><span class="line"><span class="function"><span class="params">        conductDown(<span class="params">child.key</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">      &#125;</span>)</span></span><br><span class="line"><span class="function">    <span class="params">if</span> (<span class="params">parent</span>) &#123;</span></span><br><span class="line"><span class="function">      // 此函数递归出其父节点，并将其设为选中或者半选中状态</span></span><br><span class="line"><span class="function">      <span class="params">conductUp</span>(<span class="params">parent.key</span>)</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  // 遍历外部传入选中的值</span></span><br><span class="line"><span class="function">  ;(<span class="params">keyList || []</span>).<span class="params">forEach</span>(<span class="params">(<span class="params">key: <span class="built_in">string</span></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    conduct(<span class="params">key</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;</span>)</span></span><br><span class="line"><span class="function">  <span class="params">const</span> <span class="params">checkedKeyList</span>: <span class="params">string</span>[] = []</span></span><br><span class="line"><span class="function">  <span class="params">const</span> <span class="params">halfCheckedKeyList</span>: <span class="params">string</span>[] = []</span></span><br><span class="line"><span class="function">  <span class="params">Object</span>.<span class="params">keys</span>(<span class="params">checkedKeys</span>).<span class="params">forEach</span>(<span class="params">key =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params">checkedKeys[key]</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      checkedKeyList.push(<span class="params">key</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;</span>)</span></span><br><span class="line"><span class="function">  <span class="params">Object</span>.<span class="params">keys</span>(<span class="params">halfCheckedKeys</span>).<span class="params">forEach</span>(<span class="params">key =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params">!checkedKeys[key] &amp;&amp; halfCheckedKeys[key]</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      halfCheckedKeyList.push(<span class="params">key</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;</span>)</span></span><br><span class="line"><span class="function">  <span class="params">return</span> &#123;</span></span><br><span class="line"><span class="function">    <span class="params">checkedKeys</span>: <span class="params">checkedKeyList</span>,</span></span><br><span class="line"><span class="function">    <span class="params">halfCheckedKeys</span>: <span class="params">halfCheckedKeyList</span></span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>conductCheck</code>接受四个参数，<code>keyList</code>选中的 key 的集合，<code>checked</code>表示执行的是勾选还是反勾选操作，<code>keyEntities</code>是以 key 为属性名的节点实体列表，<code>checkStatus</code>是当前已选择的 key 和半选择的 key 的集合。</p>
<p><code>conductUp</code>函数内部<code>everyChildChecked</code>的判定在我个人看来比较巧妙，<code>if (!childChecked) everyChildChecked = false</code>，如果存在未被选中的，<code>everyChildChecked</code>就设为<code>false</code>，虽然这并不难，但我自己在实际项目中可能不会这么去用。</p>
<p>关于<code>onNodeCheck</code>函数就不细说了，就是调用了上述的<code>conductCheck</code>，得到选中和半选中的元素，然后更新状态。</p>
<h3 id="renderSelector"><a href="#renderSelector" class="headerlink" title="renderSelector"></a>renderSelector</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; TreeNode.tsx</span><br><span class="line">renderSelector &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; title, selected &#125; &#x3D; this.props</span><br><span class="line">  return (</span><br><span class="line">    &lt;span</span><br><span class="line">      title&#x3D;&#123;typeof title &#x3D;&#x3D;&#x3D; &#39;string&#39; ? title : &#39;&#39;&#125;</span><br><span class="line">      onClick&#x3D;&#123;this.onSelectorClick&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;this.renderIcon()&#125;</span><br><span class="line">      &#123;title&#125;</span><br><span class="line">    &lt;&#x2F;span&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>列表的图标和标题在此函数渲染，<code>onSelectorClick</code>与上述几个渲染的函数相同，最终都是调用的 <code>Tree</code>组件中的<code>onNodeSelect</code>函数。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Tree.jsx</span></span><br><span class="line">onNodeSelect = (</span><br><span class="line">  e: React.MouseEvent&lt;HTMLSpanElement, MouseEvent&gt;,</span><br><span class="line">  treeNode: <span class="built_in">any</span></span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; selectedKeys &#125; = <span class="keyword">this</span>.state</span><br><span class="line">  <span class="keyword">const</span> &#123; keyEntities &#125; = <span class="keyword">this</span>.state</span><br><span class="line">  <span class="keyword">const</span> &#123; selected, eventKey &#125; = treeNode.props</span><br><span class="line">  <span class="keyword">const</span> targetSelected = !selected</span><br><span class="line">  <span class="keyword">if</span> (!targetSelected) &#123;</span><br><span class="line">    selectedKeys = arrDel(selectedKeys, eventKey)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    selectedKeys = arrAdd(selectedKeys, eventKey)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> selectedNodes = selectedKeys</span><br><span class="line">    .map(<span class="function">(<span class="params">key: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> entity = keyEntities[key]</span><br><span class="line">      <span class="keyword">if</span> (!entity) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> entity.node</span><br><span class="line">    &#125;)</span><br><span class="line">    .filter(<span class="function">(<span class="params">node: <span class="built_in">any</span></span>) =&gt;</span> node)</span><br><span class="line">  <span class="keyword">this</span>.setUncontrolledState(&#123; selectedKeys &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而<code>onNodeSelect</code>所做的事情也非常简单，就是维护了一个选择列表的数组</p>
<h3 id="renderChildren"><a href="#renderChildren" class="headerlink" title="renderChildren"></a>renderChildren</h3><p>此函数用来渲染当前节点的子节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; TreeNode.tsx</span><br><span class="line">renderChildren &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">  const &#123; expanded, pos &#125; &#x3D; this.props</span><br><span class="line">  const &#123;</span><br><span class="line">    rcTree: &#123; renderTreeNode &#125;</span><br><span class="line">  &#125; &#x3D; this.context</span><br><span class="line">  &#x2F;&#x2F; 子节点元素</span><br><span class="line">  const nodeList &#x3D; this.getNodeChildren()</span><br><span class="line">  if (nodeList.length &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">    return null</span><br><span class="line">  &#125;</span><br><span class="line">  if (expanded) &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;mapChildren(nodeList, (node: any, index: string) &#x3D;&gt;</span><br><span class="line">          renderTreeNode(node, index, pos)</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;&#x2F;ul&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此函数并使用<code>getNodeChildren</code>获取到当前节点的子节点，然后通过调用<code>Tree</code>里<code>renderTreeNode</code>渲染出来，与<code>Tree</code>组件中所做的事是一样的。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过这次对<code>rc-tree</code>的源码解读与实践，学到了不少<code>react</code>方面的知识，首先是 api 层面的，<code>React.Children</code>、<code>Context</code>、<code>React.cloneElement</code>、<code>getDerivedStateFromProps</code>等等，虽然有些平时看过，但没有实际使用过，也就只停留在看看的层面。另外还有写法的经验，比如我之前一直不清楚<code>util</code>里应该放什么比较好，还有函数应该拆分到什么程度(<code>traverseTreeNodes</code>值得一看)，以及渲染组件应该组织。最重要的还是实现 tree 渲染的思路，也就是<code>TreeNode</code>组件中的<code>renderChildren函数</code>。同时递归的使用也比较多，而循环加递归的组合可以实现一些比较神奇的操作。</p>
<p>看完<code>rc-tree</code>之后深感自己对<code>react</code>认知不足，还需多加学习。</p>
]]></content>
      <categories>
        <category>react</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>typescript</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3之flush</title>
    <url>/2021/03/10/vue3%E4%B9%8Bflush/</url>
    <content><![CDATA[<p>注：以下说明基于 <code>vue3 v3.0.7</code></p>
<p>以下代码，来自于 <a href="https://github.com/vuejs/vue-next/blob/master/packages/runtime-core/src/scheduler.ts" target="_blank" rel="noopener">scheduler</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 是否正在刷新</span></span><br><span class="line"><span class="keyword">let</span> isFlushing = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 是否等待刷新，true表示正在等待刷新</span></span><br><span class="line"><span class="keyword">let</span> isFlushPending = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 当前刷新队列指针位置</span></span><br><span class="line"><span class="keyword">let</span> flushIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 刷新队列</span></span><br><span class="line"><span class="keyword">const</span> queue: SchedulerJob[] = []</span><br></pre></td></tr></table></figure>

<p>外部调用一般为 <a href="https://github.com/vuejs/vue-next/blob/master/packages/runtime-core/src/scheduler.ts#L79" target="_blank" rel="noopener">queueJob</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">queueJob</span>(<span class="params">job: SchedulerJob</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    (!queue.length ||</span><br><span class="line">      !queue.includes(</span><br><span class="line">        job,</span><br><span class="line">        isFlushing &amp;&amp; job.allowRecurse ? flushIndex + <span class="number">1</span> : flushIndex</span><br><span class="line">      )) &amp;&amp;</span><br><span class="line">    job !== currentPreFlushParentJob</span><br><span class="line">  ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查看这个任务是否</span></span><br><span class="line">    <span class="keyword">const</span> pos = findInsertionIndex(job)</span><br><span class="line">    <span class="keyword">if</span> (pos &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果队列中已经存在此任务，则插在此任务后面</span></span><br><span class="line">      queue.splice(pos, <span class="number">0</span>, job)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 压入队列</span></span><br><span class="line">      queue.push(job)</span><br><span class="line">    &#125;</span><br><span class="line">    queueFlush()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>queueJob</code> 的主要作用就是将传入的任务，压入队列。任务压入完毕之后调用了 <code>queueFlush</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queueFlush</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isFlushing &amp;&amp; !isFlushPending) &#123;</span><br><span class="line">    <span class="comment">// 标识为正在等待刷新</span></span><br><span class="line">    isFlushPending = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 设置当前执行的任务</span></span><br><span class="line">    currentFlushPromise = resolvedPromise.then(flushJobs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>queueFlush</code> 设置了当前等待刷新状态，表明当前有任务正在等待刷新。其后调用了 <code>flushJobs</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushJobs</span>(<span class="params">seen?: CountMap</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 转换状态，设置正在刷新状态</span></span><br><span class="line">  isFlushPending = <span class="literal">false</span></span><br><span class="line">  isFlushing = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  flushPreFlushCbs(seen)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 再刷新前给队列排序</span></span><br><span class="line">  <span class="comment">// 确保：</span></span><br><span class="line">  <span class="comment">// 1. 组件是按照父节点到子节点顺序更新</span></span><br><span class="line">  <span class="comment">//（因为父节点总是在子节点之前被创建，这样父节点的 effect 的优先权会更小）</span></span><br><span class="line">  <span class="comment">// 2. 如果一个组件在父组件更新的时候被卸载了，这个组件的更新操作将会被跳过</span></span><br><span class="line">  queue.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> getId(a) - getId(b))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 依次执行队列里的job</span></span><br><span class="line">    <span class="keyword">for</span> (flushIndex = <span class="number">0</span>; flushIndex &lt; queue.length; flushIndex++) &#123;</span><br><span class="line">      <span class="keyword">const</span> job = queue[flushIndex]</span><br><span class="line">      <span class="keyword">if</span> (job) &#123;</span><br><span class="line">        callWithErrorHandling(job, <span class="literal">null</span>, ErrorCodes.SCHEDULER)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 指正归零</span></span><br><span class="line">    flushIndex = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 队列清零</span></span><br><span class="line">    queue.length = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    flushPostFlushCbs(seen)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结束刷新</span></span><br><span class="line">    isFlushing = <span class="literal">false</span></span><br><span class="line">    currentFlushPromise = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 在队列清空前持续刷新</span></span><br><span class="line">    <span class="keyword">if</span> (queue.length || pendingPostFlushCbs.length) &#123;</span><br><span class="line">      flushJobs(seen)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：<code>vue</code> 异步刷新的原理在于，外部的 <code>job</code> 持续进来之后，如果会持续压入队列</p>
<p>如果当前没有任务在等待或者没有正在任务在刷新，就会发起一个微任务，将任务设置为等待状态</p>
<p>如果当前有刷新正在进行，这个<code>job</code>也会顺带着一起处理</p>
<p>由于任务是放在微任务队列里的，所以是异步的</p>
]]></content>
      <categories>
        <category>vue3</category>
      </categories>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>vue3 响应原理</title>
    <url>/2021/03/09/vue3%E4%B9%8Beffect/</url>
    <content><![CDATA[<p>注：以下说明基于 <code>vue3 v3.0.7</code></p>
<p><code>vue3</code> 的响应式模块位于 <code>reactivity</code> 目录下，我们以以下代码为例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> test = reactive(&#123;</span><br><span class="line">  count: <span class="number">0</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="track"><a href="#track" class="headerlink" title="track"></a>track</h3><p>首先找到 <a href="https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/reactive.ts#L85" target="_blank" rel="noopener">reactive</a> 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span>  (<span class="params">target: object</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果尝试观察一个只读的 proxy，返回 target 本身</span></span><br><span class="line">  <span class="keyword">if</span> (target &amp;&amp; (target <span class="keyword">as</span> Target)[ReactiveFlags.IS_READONLY]) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> createReactiveObject(</span><br><span class="line">    target,</span><br><span class="line">    <span class="literal">false</span>,</span><br><span class="line">    mutableHandlers,</span><br><span class="line">    mutableCollectionHandlers</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着移步到 <code>166</code> 行，找到 <code>createReactiveObject</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createReactiveObject</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  target: Target,</span></span></span><br><span class="line"><span class="function"><span class="params">  isReadonly: boolean,</span></span></span><br><span class="line"><span class="function"><span class="params">  baseHandlers: ProxyHandler&lt;any&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  collectionHandlers: ProxyHandler&lt;any&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果被观察对象已经被代理了，直接返回</span></span><br><span class="line">  <span class="comment">// 例外: 调用 readonly()</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    target[ReactiveFlags.RAW] &amp;&amp;</span><br><span class="line">    !(isReadonly &amp;&amp; target[ReactiveFlags.IS_REACTIVE])</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果已经存在了，直接返回已存在的值</span></span><br><span class="line">  <span class="keyword">const</span> proxyMap = isReadonly ? readonlyMap : reactiveMap</span><br><span class="line">  <span class="keyword">const</span> existingProxy = proxyMap.get(target)</span><br><span class="line">  <span class="keyword">if</span> (existingProxy) &#123;</span><br><span class="line">    <span class="keyword">return</span> existingProxy</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 只有白名单内的值可以被观察</span></span><br><span class="line">  <span class="keyword">const</span> targetType = getTargetType(target)</span><br><span class="line">  <span class="keyword">if</span> (targetType === TargetType.INVALID) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建代理</span></span><br><span class="line">  <span class="comment">// collectionHandlers 引用类型的代理</span></span><br><span class="line">  <span class="comment">// baseHandlers 基础类型的代理</span></span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(</span><br><span class="line">    target,</span><br><span class="line">    targetType === TargetType.COLLECTION ? collectionHandlers : baseHandlers</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// 缓存到全局</span></span><br><span class="line">  proxyMap.set(target, proxy)</span><br><span class="line">  <span class="comment">// 返回代理</span></span><br><span class="line">  <span class="keyword">return</span> proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此处使用的 <code>baseHandlers</code> 由 <code>reactive</code> 可知，调用的是<a href="https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/baseHandlers.ts#L75" target="_blank" rel="noopener">createGetter</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutableHandlers: ProxyHandler&lt;object&gt; = &#123;</span><br><span class="line">  <span class="keyword">get</span>,</span><br><span class="line">  <span class="keyword">set</span>,</span><br><span class="line">  deleteProperty,</span><br><span class="line">  has,</span><br><span class="line">  ownKeys</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const <span class="keyword">get</span> = /*#__PURE__*/ createGetter()</span><br><span class="line"></span><br><span class="line">function createGetter(isReadonly = false, shallow = false) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">target: Target, key: string | symbol, receiver: object</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数组操作</span></span><br><span class="line">    <span class="keyword">const</span> targetIsArray = isArray(target)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isReadonly &amp;&amp; targetIsArray &amp;&amp; hasOwn(arrayInstrumentations, key)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(arrayInstrumentations, key, receiver)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非数组操作</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="built_in">Reflect</span>.get(target, key, receiver)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果不是只读的，调用 track</span></span><br><span class="line">    <span class="keyword">if</span> (!isReadonly) &#123;</span><br><span class="line">      track(target, TrackOpTypes.GET, key)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ref 处理</span></span><br><span class="line">    <span class="keyword">if</span> (isRef(res)) &#123;</span><br><span class="line">      <span class="comment">// ref unwrapping - does not apply for Array + integer key.</span></span><br><span class="line">      <span class="keyword">const</span> shouldUnwrap = !targetIsArray || !isIntegerKey(key)</span><br><span class="line">      <span class="keyword">return</span> shouldUnwrap ? res.value : res</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对象处理，</span></span><br><span class="line">    <span class="keyword">if</span> (isObject(res)) &#123;</span><br><span class="line">      <span class="comment">// 为了避免无效值的警告，以及环形引用，这里将返回值也通过 代理返回</span></span><br><span class="line">      <span class="keyword">return</span> isReadonly ? readonly(res) : reactive(res)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在处理数组的时候，调用了 <code>arrayInstrumentations</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayInstrumentations: Record&lt;string, <span class="built_in">Function</span>&gt; = &#123;&#125;</span><br><span class="line"><span class="comment">// 拦截了 'includes', 'indexOf', 'lastIndexOf' 方法</span></span><br><span class="line">;([<span class="string">'includes'</span>, <span class="string">'indexOf'</span>, <span class="string">'lastIndexOf'</span>] <span class="keyword">as</span> <span class="keyword">const</span>).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = <span class="built_in">Array</span>.prototype[key] <span class="keyword">as</span> any</span><br><span class="line">  arrayInstrumentations[key] = <span class="function"><span class="keyword">function</span>(<span class="params">this: unknown[], ...args: unknown[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = toRaw(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = <span class="keyword">this</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">      track(arr, TrackOpTypes.GET, i + <span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 先用初始参数运行</span></span><br><span class="line">    <span class="keyword">const</span> res = method.apply(arr, args)</span><br><span class="line">    <span class="keyword">if</span> (res === <span class="number">-1</span> || res === <span class="literal">false</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果不起作用，使用初始值再跑一遍</span></span><br><span class="line">      <span class="keyword">return</span> method.apply(arr, args.map(toRaw))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 避免数组长度变化导致的无限死循环 (#2137)</span></span><br><span class="line">;([<span class="string">'push'</span>, <span class="string">'pop'</span>, <span class="string">'shift'</span>, <span class="string">'unshift'</span>, <span class="string">'splice'</span>] <span class="keyword">as</span> <span class="keyword">const</span>).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> method = <span class="built_in">Array</span>.prototype[key] <span class="keyword">as</span> any</span><br><span class="line">  arrayInstrumentations[key] = <span class="function"><span class="keyword">function</span>(<span class="params">this: unknown[], ...args: unknown[]</span>) </span>&#123;</span><br><span class="line">    pauseTracking()</span><br><span class="line">    <span class="keyword">const</span> res = method.apply(<span class="keyword">this</span>, args)</span><br><span class="line">    resetTracking()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>下面着一下关键的 <a href="https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/effect.ts#L141" target="_blank" rel="noopener">track</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">track</span>(<span class="params">target: object, type: TrackOpTypes, key: unknown</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 调用时需要 shouldTrack 和 activeEffect 为真</span></span><br><span class="line">  <span class="keyword">if</span> (!shouldTrack || activeEffect === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从缓存中获取，如果不存在，则创建一个新map，并以target为key，空map为 value 赋值</span></span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    targetMap.set(target, (depsMap = <span class="keyword">new</span> <span class="built_in">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 从depsMap中获取指定key的值，这里的值一般存的副作用方法</span></span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.get(key)</span><br><span class="line">  <span class="comment">// 如果不存在，创建一个新set，并赋值</span></span><br><span class="line">  <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">    depsMap.set(key, (dep = <span class="keyword">new</span> <span class="built_in">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果dep中没有当前的副作用方法，则添加</span></span><br><span class="line">  <span class="keyword">if</span> (!dep.has(activeEffect)) &#123;</span><br><span class="line">    dep.add(activeEffect)</span><br><span class="line">    activeEffect.deps.push(dep)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="effect"><a href="#effect" class="headerlink" title="effect"></a>effect</h3><p>在 <code>track</code> 里提到了 <code>effect</code>，这里也来看一下，首先看一下器入口函数 <a href="https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/effect.ts#L55" target="_blank" rel="noopener">effect</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">effect</span>&lt;<span class="title">T</span> = <span class="title">any</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  fn: (</span>) =&gt; <span class="title">T</span>,</span></span><br><span class="line"><span class="function">  <span class="title">options</span>: <span class="title">ReactiveEffectOptions</span> = <span class="title">EMPTY_OBJ</span></span></span><br><span class="line"><span class="function">): <span class="title">ReactiveEffect</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 返回原函数</span></span><br><span class="line">  <span class="keyword">if</span> (isEffect(fn)) &#123;</span><br><span class="line">    fn = fn.raw</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建副作用函数</span></span><br><span class="line">  <span class="keyword">const</span> effect = createReactiveEffect(fn, options)</span><br><span class="line">  <span class="keyword">if</span> (!options.lazy) &#123;</span><br><span class="line">    effect()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> effect</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uid = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createReactiveEffect</span>&lt;<span class="title">T</span> = <span class="title">any</span>&gt;(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  fn: (</span>) =&gt; <span class="title">T</span>,</span></span><br><span class="line"><span class="function">  <span class="title">options</span>: <span class="title">ReactiveEffectOptions</span></span></span><br><span class="line"><span class="function">): <span class="title">ReactiveEffect</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> effect = <span class="function"><span class="keyword">function</span> <span class="title">reactiveEffect</span>(<span class="params"></span>): <span class="title">unknown</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!effect.active) &#123;</span><br><span class="line">      <span class="keyword">return</span> options.scheduler ? <span class="literal">undefined</span> : fn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果当前effect没被</span></span><br><span class="line">    <span class="keyword">if</span> (!effectStack.includes(effect)) &#123;</span><br><span class="line">      <span class="comment">// 清空 effect上的deps数据</span></span><br><span class="line">      cleanup(effect)</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        enableTracking()</span><br><span class="line">        <span class="comment">// 加入当前调用栈</span></span><br><span class="line">        effectStack.push(effect)</span><br><span class="line">        <span class="comment">// 设置当前调用effect</span></span><br><span class="line">        activeEffect = effect</span><br><span class="line">        <span class="comment">// 调用外部传入的方法，并返回其结果</span></span><br><span class="line">        <span class="keyword">return</span> fn()</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 调用完弹出</span></span><br><span class="line">        effectStack.pop()</span><br><span class="line">        resetTracking()</span><br><span class="line">        <span class="comment">// 将当前调用栈最后一个设置为当前调用 effect</span></span><br><span class="line">        activeEffect = effectStack[effectStack.length - <span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">as</span> ReactiveEffect</span><br><span class="line">  effect.id = uid++</span><br><span class="line">  effect.allowRecurse = !!options.allowRecurse</span><br><span class="line">  effect._isEffect = <span class="literal">true</span></span><br><span class="line">  effect.active = <span class="literal">true</span></span><br><span class="line">  effect.raw = fn</span><br><span class="line">  effect.deps = []</span><br><span class="line">  effect.options = options</span><br><span class="line">  <span class="keyword">return</span> effect</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cleanup</span>(<span class="params">effect: ReactiveEffect</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; deps &#125; = effect</span><br><span class="line">  <span class="keyword">if</span> (deps.length) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; deps.length; i++) &#123;</span><br><span class="line">      deps[i].delete(effect)</span><br><span class="line">    &#125;</span><br><span class="line">    deps.length = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="trigger"><a href="#trigger" class="headerlink" title="trigger"></a>trigger</h3><p>现在还剩最后一步，就是如何去触发，<code>track</code> 中存起来的 <code>effect</code></p>
<p><code>track</code> 是在 <code>get</code> 拦截中被调用的，相对的，<code>trigger</code> 则是在 <code>set</code> 拦截中被调用的。</p>
<p>找到 <a href="https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/baseHandlers.ts#L132" target="_blank" rel="noopener">createSetter</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSetter</span>(<span class="params">shallow = false</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    target: object,</span></span></span><br><span class="line"><span class="function"><span class="params">    key: string | symbol,</span></span></span><br><span class="line"><span class="function"><span class="params">    value: unknown,</span></span></span><br><span class="line"><span class="function"><span class="params">    receiver: object</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> oldValue = (target <span class="keyword">as</span> any)[key]</span><br><span class="line">    <span class="keyword">if</span> (!shallow) &#123;</span><br><span class="line">      <span class="comment">// 获取初始值</span></span><br><span class="line">      value = toRaw(value)</span><br><span class="line">      <span class="keyword">if</span> (!isArray(target) &amp;&amp; isRef(oldValue) &amp;&amp; !isRef(value)) &#123;</span><br><span class="line">        oldValue.value = value</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> hadKey =</span><br><span class="line">      isArray(target) &amp;&amp; isIntegerKey(key)</span><br><span class="line">        ? <span class="built_in">Number</span>(key) &lt; target.length</span><br><span class="line">        : hasOwn(target, key)</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(target, key, value, receiver)</span><br><span class="line">    <span class="comment">// don't trigger if target is something up in the prototype chain of original</span></span><br><span class="line">    <span class="keyword">if</span> (target === toRaw(receiver)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!hadKey) &#123;</span><br><span class="line">        trigger(target, TriggerOpTypes.ADD, key, value)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasChanged(value, oldValue)) &#123;</span><br><span class="line">        trigger(target, TriggerOpTypes.SET, key, value, oldValue)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里在最后调用了关键的方法 <a href="https://github.com/vuejs/vue-next/blob/master/packages/reactivity/src/effect.ts#L167" target="_blank" rel="noopener">trigger</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  target: object,</span></span></span><br><span class="line"><span class="function"><span class="params">  type: TriggerOpTypes,</span></span></span><br><span class="line"><span class="function"><span class="params">  key?: unknown,</span></span></span><br><span class="line"><span class="function"><span class="params">  newValue?: unknown,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldValue?: unknown,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldTarget?: Map&lt;unknown, unknown&gt; | Set&lt;unknown&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.get(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    <span class="comment">// 没有被追踪</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> effects = <span class="keyword">new</span> <span class="built_in">Set</span>&lt;ReactiveEffect&gt;()</span><br><span class="line">  <span class="keyword">const</span> add = <span class="function">(<span class="params">effectsToAdd: <span class="built_in">Set</span>&lt;ReactiveEffect&gt; | <span class="literal">undefined</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (effectsToAdd) &#123;</span><br><span class="line">      effectsToAdd.forEach(<span class="function"><span class="params">effect</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (effect !== activeEffect || effect.allowRecurse) &#123;</span><br><span class="line">          effects.add(effect)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里通过调用 add 方法，将 effect 加入到 effects中</span></span><br><span class="line">  <span class="keyword">if</span> (type === TriggerOpTypes.CLEAR) &#123;</span><br><span class="line">    depsMap.forEach(add)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key === <span class="string">'length'</span> &amp;&amp; isArray(target)) &#123;</span><br><span class="line">    depsMap.forEach(<span class="function">(<span class="params">dep, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">'length'</span> || key &gt;= (newValue <span class="keyword">as</span> number)) &#123;</span><br><span class="line">        add(dep)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> run = <span class="function">(<span class="params">effect: ReactiveEffect</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (effect.options.scheduler) &#123;</span><br><span class="line">      effect.options.scheduler(effect)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      effect()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 触发副作用</span></span><br><span class="line">  effects.forEach(run)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>vue</code> 中的使用示例 <a href="https://github.com/vuejs/vue-next/blob/master/packages/runtime-core/src/renderer.ts#L1389" target="_blank" rel="noopener">setupRenderEffect</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> setupRenderEffect: SetupRenderEffectFn = (</span><br><span class="line">  instance,</span><br><span class="line">  initialVNode,</span><br><span class="line">  container,</span><br><span class="line">  anchor,</span><br><span class="line">  parentSuspense,</span><br><span class="line">  isSVG,</span><br><span class="line">  optimized</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 为渲染创建响应式 effect</span></span><br><span class="line">  instance.update = effect(<span class="function"><span class="keyword">function</span> <span class="title">componentEffect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结：<code>vue</code> 在<code>update，watch，reactive</code>中调用 <code>effect</code>，通过 <code>Proxy</code> 劫持 <code>get</code> 通过 <code>track</code> 来收集 <code>effect</code>，然后在 <code>trigger</code> 中触发目标收集的所有 <code>effect</code>，在<code>effect</code> 中调用 <code>patch</code> 来触发渲染。</p>
]]></content>
      <categories>
        <category>vue3</category>
      </categories>
      <tags>
        <tag>vue3</tag>
      </tags>
  </entry>
  <entry>
    <title>宏任务与微任务</title>
    <url>/2021/02/04/%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>在进入正题之前，我们先了解一下浏览器内的队列，可以参考一下下图：</p>
<p><img src="/img/promise-queue.png" alt="promise-queue"></p>
<p>消息队列中的任务类型大致可分为：输入事件(鼠标滚动、点击、移动)、微任务、文件读写、WebSocket、JavaScript 定时器等等，另外还有页面相关事件，例如 JavaScript 执行、执行 DOM、样式计算、布局计算、CSS动画等。</p>
<p>这样遇到的第一个问题是，如何处理高优先级的任务。就以DOM节点变化来说，其变化非常频繁。</p>
<p>为了解决上面这个问题，就需要引入微任务的概念。我们把消息队列中的任务称为宏任务，每个宏任务中都包含一个微任务队列，在执行宏任务的过程中，如果DOM有变化，那么就会将该变化添加到微任务列表中，等宏任务中的主要功能都直接完成之后，会取出微任务队列执行。</p>
<p>第二个问题，单个任务执行过长问题，使用回调可以来规避。</p>
<h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h3><p>看完队列，我们再来看看 <code>setTimeout</code>，消息队列中的任务是按照顺序执行的，所以不能将定时器的回调函数直接添加到消息队列中，在正常使用的消息队列之外，还有一个延迟队列</p>
<p>当 <code>JavaScript</code> 调用 <code>setTimeout</code> 设置回调函数的时候，渲染进程将会创建一个回调任务，并添加到延迟队列中</p>
<p>当消息队列的一个任务执行完成之后，就开始执行延时队列函数，根据发起时间和延时时间可以计算出到期的任务，到期任务执行完成之后，继续下一个循环。</p>
<p>使用 <code>setTimeout</code> 注意项</p>
<h4 id="如果当前任务执行时间过久，会影延迟到期定时器任务的执行"><a href="#如果当前任务执行时间过久，会影延迟到期定时器任务的执行" class="headerlink" title="如果当前任务执行时间过久，会影延迟到期定时器任务的执行"></a>如果当前任务执行时间过久，会影延迟到期定时器任务的执行</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'bar'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setTimeout(bar, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">5</span>+<span class="number">8</span>+<span class="number">8</span>+<span class="number">8</span></span><br><span class="line">        <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p>延时任务会被延时 500毫秒，执行过程如下图</p>
<p><img src="/img/promise-timeout.png" alt="promise-timeout"></p>
<h4 id="如果-setTimeout-存在嵌套调用，那么系统会设置最短时间间隔为-4-毫秒"><a href="#如果-setTimeout-存在嵌套调用，那么系统会设置最短时间间隔为-4-毫秒" class="headerlink" title="如果 setTimeout 存在嵌套调用，那么系统会设置最短时间间隔为 4 毫秒"></a>如果 setTimeout 存在嵌套调用，那么系统会设置最短时间间隔为 4 毫秒</h4><p>看如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cb</span>(<span class="params"></span>) </span>&#123; setTimeout(cb, <span class="number">0</span>); &#125;</span><br><span class="line">setTimeout(cb, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>这段代码前五次调用的的间隔时间比较小，如果被嵌套调用5次以上，系统会判定该函数方法被阻塞，如果定时器的调用时间间隔小于4毫秒，浏览器会将每次调用时间间隔设置为 4 毫秒。所以使用 <code>setTimeout</code> 来实现 <code>JavaScript</code> 动画就不是一个很好的主意。</p>
<h4 id="未激活的页面，setTimeout-执行最小间隔是-1000-毫秒"><a href="#未激活的页面，setTimeout-执行最小间隔是-1000-毫秒" class="headerlink" title="未激活的页面，setTimeout 执行最小间隔是 1000 毫秒"></a>未激活的页面，setTimeout 执行最小间隔是 1000 毫秒</h4><h4 id="延时执行时间有最大值，超出-2147483647-毫秒会被立即执行。"><a href="#延时执行时间有最大值，超出-2147483647-毫秒会被立即执行。" class="headerlink" title="延时执行时间有最大值，超出 2147483647 毫秒会被立即执行。"></a>延时执行时间有最大值，超出 2147483647 毫秒会被立即执行。</h4><h3 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h3><p>了解完 <code>setTimeout</code>后，我们在看一下 <code>XMLHttpRequest</code>，其工作过程可以参考下图：</p>
<p><img src="/img/promise-ajax.png" alt="promise-ajax"></p>
<h3 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h3><h4 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h4><p>页面中中的大部分任务都是在主线程上执行的，这些任务包括了：</p>
<ul>
<li>渲染事件（如解析 DOM、计算布局、绘制）</li>
<li>用户交互事件（如鼠标点击、滚动页面、放大缩小等）</li>
<li>JavaScript 脚本执行事件</li>
<li>网络请求完成、文件读写完成事件</li>
</ul>
<p>看下面一段代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div id=<span class="string">'demo'</span>&gt;</span><br><span class="line">            &lt;ol&gt;</span><br><span class="line">                &lt;li&gt;test&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>ol&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>body&gt;</span><br><span class="line">    &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">timerCallback2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">timerCallback</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">            setTimeout(timerCallback2,<span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        setTimeout(timerCallback,<span class="number">0</span>)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>

<p>这里我们的目的是想用 <code>setTimeout</code> 来设置两个回调任务，并让他们按照前后顺序来指向，中间不要插入其他任务，但实际执行情况如下：</p>
<p><img src="/img/promise-p.png" alt="promise-p"></p>
<p>左右两个黄色色块就是 <code>setTimeout</code> 触发的两个定时器任务，在中间浅红色区域有很多一段一段的任务，这是被渲染引擎插在两个定时器任务中间的任务。</p>
<p>这里要说明一下，<code>setTimeout</code>函数所触发的回调函数都是宏任务。</p>
<h4 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h4><p>首先来说一下同步回调和异步回调的概念，每个任务在执行过程中，都有自己的调用栈，同步回调就是在当前主函数的上下文中执行回调函数，异步回调是指回到函数在主函数之外执行，一般由两种方式：</p>
<ul>
<li>第一种是把异步函数做成一个任务，添加到信息队列尾部</li>
<li>第二种是把异步函数添加到微任务队列中，这样就可以在当前任务的末尾处执行微任务了</li>
</ul>
<p>而微任务就是一个需要异步执行的函数，执行时机是在主函数执行之后，当前宏任务结束之前</p>
<p>现代浏览器里面，产生微任务有两种方式</p>
<ul>
<li>使用 <code>MutationObserver</code> 监控某个 DOM 节点，然后再通过 <code>JavaScript</code> 来修改这个节点，或者为这个节点添加、删除部分子节点，当 DOM 节点发生变化时，机会产生 DOM 变化记录的微任务</li>
<li>使用 <code>Promise</code>，当调用 <code>Promise.resolve()</code> 或者 <code>Promise.reject()</code>的时候，也会产出微任务</li>
</ul>
<p>这两个方式产生的微任务都会被<code>JavaScript</code>引擎按照顺序保存到微任务中</p>
<p>当前宏任务的 <code>JavaScript</code> 快执行完成时，js 引擎准备退出全局指向上下文并清空调用栈的时候，<code>JavaScript</code> 引擎·会检查全局执行上下文中的微任务队列，然后按照顺序执行队列中的微任务。执行微任务的时间点称为检查点。</p>
<p>如果在执行微任务的过程中，产生了新的微任务，同样会将该微任务添加到微任务队列中，也就是在执行微任务过程中产生的新的微任务并不会推迟到下个宏任务中，而是在当前宏任务中继续执行，直到清空队列。</p>
<p>如果在在一个宏任务中分别创建一个用于回调的宏任务和微任务，微任务一定会早于宏任务执行，因为宏任务会进入队列，而微任务会在本次执行</p>
<p>其示意图如下：</p>
<p><img src="/img/promise-w01.png" alt="promise-w01"><br><img src="/img/promise-w02.png" alt="promise-w02"></p>
<h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><p> 以如下代码为例：</p>
 <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 此代码会被立即执行</span></span><br><span class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 此代码会产生一个微任务，放到此宏任务的检查点执行，也就是.then之后</span></span><br><span class="line">    <span class="comment">// 这时候可以顺利的取到.then内部的回调函数来执行</span></span><br><span class="line">    resolve(<span class="number">100</span>)</span><br><span class="line">&#125;)</span><br><span class="line">test.then(<span class="function"><span class="params">v</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h3> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 宏任务阶段执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'foo'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 宏任务阶段执行</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bar start'</span>)</span><br><span class="line">  <span class="keyword">await</span> foo()</span><br><span class="line">  <span class="comment">// 微任务阶段执行</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bar end'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 宏任务阶段执行</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 延时队列最后执行</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">bar();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 宏任务阶段执行</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise executor'</span>)</span><br><span class="line">  resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 微任务阶段执行</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'promise then'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 宏任务阶段执行</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最终输出</span></span><br><span class="line"><span class="comment">// script start / bar start / foo / promise executor / script end / bar end / promise then / setTimeout</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>promise</category>
      </categories>
      <tags>
        <tag>promise</tag>
      </tags>
  </entry>
  <entry>
    <title>SVG文字外框自适应 &amp; 模板运算替换</title>
    <url>/2020/09/09/%E6%A8%A1%E6%9D%BF%E8%BF%90%E7%AE%97%E6%9B%BF%E6%8D%A2/</url>
    <content><![CDATA[<p>如果我们动态的修改svg内部文字的长度，很容易遇到文字超出外框的情况，这个时候我们就需要自动调节外框的长度。</p>
<p>假设<code>svg</code>的外框路径代码如下，其中<code>{{x+*}}</code>中的x就是文字的长度，我们需要加上后面的数字，并把原先的模板替换掉。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;path d=<span class="string">"M13.0780339,0.5 L0.574889123,22.2905543 L3.49834121,27.5 L&#123;&#123;x+31&#125;&#125;.7099611,27.5 L&#123;&#123;x+44&#125;&#125;.1969137,5.64739256 L&#123;&#123;x+41&#125;&#125;.4022785,0.5 L13.0780339,0.5 Z"</span>&gt;&lt;<span class="regexp">/path&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>最初我的想法是先用正则把 <code>{{x+31}}、{{x+44}}、{{x+41}}</code>全都匹配出来，然后再通过正则把里面的数字匹配出来，然后和<code>x</code>相加，把得到的最终值替换回去，核心代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> svg = <span class="string">'&lt;path d="M13.0780339,0.5 L0.574889123,22.2905543 L3.49834121,27.5 L&#123;&#123;x+31&#125;&#125;.7099611,27.5 L&#123;&#123;x+44&#125;&#125;.1969137,5.64739256 L&#123;&#123;x+41&#125;&#125;.4022785,0.5 L13.0780339,0.5 Z"&gt;&lt;/path&gt;'</span></span><br><span class="line"></span><br><span class="line">svg.match(<span class="regexp">/&#123;&#123;x+.*?&#125;&#125;/g</span>) <span class="comment">// 匹配出模板</span></span><br><span class="line"></span><br><span class="line">string.match(<span class="regexp">/[0-9]+/</span>) <span class="comment">// 匹配出模板里的字符串</span></span><br></pre></td></tr></table></figure>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>方法一虽然实现起来比较简单，但是看起来比较的low，而且限定只能处理数字，便有了方法二，核心代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseTemplate</span>(<span class="params">template, x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> origArr = template.match(<span class="regexp">/&#123;&#123;x+.*?&#125;&#125;/g</span>);</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(origArr));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = arr[i].replace(<span class="regexp">/&#123;&#123;|&#125;&#125;/g</span>, <span class="string">""</span>);</span><br><span class="line">    arr[i] = <span class="built_in">eval</span>(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; origArr.length; i++) &#123;</span><br><span class="line">    template = template.replace(origArr[i], arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> template;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法二和方法同样先通过正则匹配出了模板代码，然后通过把{{ }}里的代码取出来进行<code>eval</code>直接运算得到结果，然后进行替换，这种方法没有了数字的限制。</p>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>方法一和二的具体实现代码其实都不少，便有了方法三，核心代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> svg = <span class="string">'&lt;path d="M13.0780339,0.5 L0.574889123,22.2905543 L3.49834121,27.5 L&#123;&#123;x+31&#125;&#125;.7099611,27.5 L&#123;&#123;x+44&#125;&#125;.1969137,5.64739256 L&#123;&#123;x+41&#125;&#125;.4022785,0.5 L13.0780339,0.5 Z"&gt;&lt;/path&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseTemplate</span>(<span class="params">template, x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> str = template.replace(<span class="regexp">/&#123;&#123;/g</span>, <span class="string">"$&#123;"</span>).replace(<span class="regexp">/&#125;&#125;/g</span>, <span class="string">"&#125;"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">"`"</span> + str + <span class="string">"`"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式利用了<code>js</code>的字符串模板运算，将 <code>{{x+31}}</code>改成了<code>xxx${x+31}xxx</code>，再通过<code>eval</code>运算直接得出最终想要的字符串。</p>
<p>方法三相对于上两种代码量少了不少，而且也不难理解。</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>浏览器插件开发</title>
    <url>/2019/07/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p>实现一个见得浏览器插件还是相当简单的，首先通过如下途径开发扩展程序页面：<img src="/img/chrome-plugin01.png" alt="chrome-plugin"></p>
<p>再打开如下图所示的开发者模式：<img src="/img/chrome-plugin02.png" alt="chrome-plugin"></p>
<p>现在可以先把浏览器放一边，在一个空的文件夹中新建一个名为<code>manifest.json</code>的文件，此文件主要用来进行项目的配置，以我这个小例子来说，有如下配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"manifest_version"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"bookmarks"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"在线收藏网址插件"</span>,</span><br><span class="line">  <span class="attr">"icons"</span>: &#123;</span><br><span class="line">    <span class="attr">"16"</span>: <span class="string">"img/icon-16.png"</span>,</span><br><span class="line">    <span class="attr">"48"</span>: <span class="string">"img/icon-48.png"</span>,</span><br><span class="line">    <span class="attr">"128"</span>: <span class="string">"img/icon-128.png"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"browser_action"</span>: &#123;</span><br><span class="line">    <span class="attr">"default_icon"</span>: <span class="string">"img/icon-48.png"</span>,</span><br><span class="line">    <span class="attr">"default_title"</span>: <span class="string">"在线网址收藏"</span>,</span><br><span class="line">    <span class="attr">"default_popup"</span>: <span class="string">"popup.html"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"permissions"</span>: [<span class="string">"bookmarks"</span>, <span class="string">"tabs"</span>, <span class="string">"activeTab"</span>, <span class="string">"storage"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>manifest_version</code>目前为固定值为 2，<code>browser_action</code>中的<code>popup.html</code>页面位置为下：</p>
<p><img src="/img/chrome-plugin03.png" alt="chrome-plugin"></p>
<p>我的功能主要便是在这个页面中实现的。</p>
<p><code>permissions</code>为权限申请，按需申请即可。</p>
<p>此处需在<code>manifest.json</code>同级目录下创建一个<code>popup.html</code>作为主要功能页。</p>
<p>在此回到浏览器的拓展程序页，点击“加载已解压的拓展程序”按钮，选择打开上面的含有<code>manifest.json</code>的文件夹，如果出现如下画面，说明插件加载成功。</p>
<p><img src="/img/chrome-plugin04.png" alt="chrome-plugin"></p>
<p>下面便是具体功能的开发了，其中除去与浏览器交互外与 web 开发无异。</p>
<p>在页面加载过程中，浏览器会在全局对象中注入<code>chrome</code>全局对象，与浏览器的交互便是通过此对象进行的。</p>
<p>此对象下的方法与属性可在<a href="https://crxdoc-zh.appspot.com/extensions/api_index" target="_blank" rel="noopener">此处</a>找到.</p>
<p>在此例子中我用到的浏览器接口有：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存储值</span></span><br><span class="line">chrome.storage.sync.set(&#123; <span class="attr">token</span>: <span class="string">'token'</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line">chrome.storage.sync.get(<span class="string">'token'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;&#125;)</span><br><span class="line"><span class="comment">// 获取查询当前窗口url</span></span><br><span class="line">chrome.tabs.query(&#123; <span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">currentWindow</span>: <span class="literal">true</span> &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">tabs</span>) </span>&#123;</span><br><span class="line">  url = tabs[<span class="number">0</span>].url</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>由此可以看出如果如浏览器交互不多的话，还是相当简单的，这里是<a href="https://github.com/1016482011/chrome-plugin-bookmarks" target="_blank" rel="noopener">完整的例子</a></p>
]]></content>
      <categories>
        <category>chrome-plugin</category>
      </categories>
      <tags>
        <tag>chrome-plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2021/01/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>本篇算是对极客上的 &lt;&lt;设计模式之美&gt;&gt; 看完之后的一个个人小总结。</p>
<h3 id="设计模式与范式"><a href="#设计模式与范式" class="headerlink" title="设计模式与范式"></a>设计模式与范式</h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>一个类只允许创建一个对象，这个类就是单例类，这个模式就是单例模式。</p>
<p>对于系统中只应该保存一份的数据比较合适。</p>
<p>在实现的时候可以注意一下此单例类是初始就创建还是延时创建</p>
<p>示例如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> instance = <span class="keyword">new</span> Logger()</span><br><span class="line">  getInstance() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>当创建逻辑比较复杂的时候，可以考虑使用工厂模式，封装对象的创建过程。</p>
<ul>
<li>当代码中存在 if-else 分支，动态的根据不同的类型创建不同的对象</li>
<li>单个对象本身创建比较复杂</li>
</ul>
<p>就个人开发经验来说，在项目中遇到过根据传入参数，创建点线面箭头等对象的需求，使用了工厂模式</p>
<h4 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h4><p>当一个类初始化参数较复杂，存在众多参数和可选项，并且存在校验时，可以使用建造者模式，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options)&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    setName (name) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    setMaxTotal (num) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    build () &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其使用方式可能如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Builder().setName(<span class="string">"dbconnectionpool"</span>).setMaxTotal(<span class="number">16</span>).build();</span><br></pre></td></tr></table></figure>

<p>调用完<code>build</code> 之后算是一个完整的创建</p>
<h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><p><code>JavaScript</code> 的引入的类，便是基于原型的语法糖</p>
<h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>代理模式，就是在不改变原始类的情况下，通过引入代理类来给原始类附加功能。示例如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  login(name) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserControllerProxy</span> </span>&#123;</span><br><span class="line">  userController = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">constructor</span>(userController)&#123;</span><br><span class="line">    <span class="keyword">this</span>.userController = userController</span><br><span class="line">  &#125;</span><br><span class="line">  login(name) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">this</span>.userController.login(name)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">new</span> UserControllerProxy(<span class="keyword">new</span> UserController())</span><br></pre></td></tr></table></figure>

<p>对于如果 <code>UserController</code> 的接口过于繁多，我们不想一个个的取重新覆写，可以通过 <code>proxy</code> 来返回我们不想覆写的接口</p>
<h4 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h4><p>在我的理解中，就是把多个分支执行组合，用作者的例子就是 JDBC驱动来查询各种数据库</p>
<h4 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h4><p>在我的个人小库 <a href="https://github.com/chenlong-frontend/validate-param" target="_blank" rel="noopener">typescript-validate-param</a>中，通过装饰器模式，增强了原有函数，添加了参数校验的功能</p>
<h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><p>在我实际开发过程中，遇到过需要同时兼容两个版本<code>sdk</code>的需求，我是通过适配器模式模式来实现的，对外传入两个版本的sdk都可以了，内部通过适配，把接口做了一层转换，再暴露出去，以此达到同时兼容的目的</p>
<h4 id="门面模式"><a href="#门面模式" class="headerlink" title="门面模式"></a>门面模式</h4><p>在我实际开发过程中，遇到过一个需求，有些内部二级模块下的方法需要挂在一级模块下暴露出去，例如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原本挂在b下方法，需要通过c直接暴露</span></span><br><span class="line">a.b.c() </span><br><span class="line">a.c()</span><br></pre></td></tr></table></figure>

<p>这里通过属性拦截代理也可以实现，不过个人觉得门面模式更加清晰。另外门面还有拥有可以合并多模块接口调用的优势，非常适合</p>
<h4 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h4><p>不常用模式。此模式并不是面向对象设计中的组合关系。以下引用作者原话说明一下</p>
<blockquote>
<p>组合模式，将一组对象组织成树形结构，将单个对象和组合对象都看做树中的节点，以统一处理逻辑，并且它利用树形结构的特点，递归地处理每个子树，依次简化代码实现。使用组合模式的前提在于，你的业务场景必须能够表示成树形结构。</p>
</blockquote>
<h4 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h4><p>不常用模式。其意图是复用对象，节省内存，前提是享元对象是不可变对象。其实现非常简单，通过工厂模式，用一个map存好即可。</p>
<p>与单例的区别在于，单例模式是为了保证对象的全局唯一，享元是为了实现对象复用，节省内存</p>
<h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p>经典模式，自定义事件分发模式便是其中之一</p>
<h4 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h4><p>在<code>js</code>中，我选择回调</p>
<h4 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h4><p>简单来说，我觉得这个模式就是使用查表法来替换<code>if</code>和<code>switch</code>的分支判断</p>
<h4 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h4><p>引用原文</p>
<blockquote>
<p>在职责链模式中，多个处理器依次处理同一个请求。一个请求先经过A处理器处理，然后再把请求传递给B处理器，B处理器处理完后再传递给C处理器，以此类推，形成一个链条。链条上的每个处理器各自承担各自的处理职责，所以叫作职责链模式。</p>
</blockquote>
<p>我觉着<code>vue3</code>中在调用了<code>createApp</code>后，感觉就是这种模式，每个函数把处理完的结果依次传给下一个</p>
<h4 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h4><p>我觉着这个模式有点像 <code>vue</code> 中的 <code>vuex</code>和 <code>react</code> 中的 <code>redux</code>。</p>
<h4 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h4><p>代码可读性差，不建议使用。本质上就是将操作和对象解耦</p>
<h4 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h4><p>捕捉一个对象的内部状态，并保存下来，例如我们实现一个编辑器，将用户的每一步操作后的结果都存到一个数组里，会导致一段时间后，对内存消耗会越来越大</p>
<p>所以我们需要全量备份和增量备份相结合，并且保持低频全量备份，高频增量备份。</p>
<h4 id="中介模式"><a href="#中介模式" class="headerlink" title="中介模式"></a>中介模式</h4><p>这个模式在实际开发中有使用过，场景在于，我有很多小的模块，有些功能需求需要组合多个模块，而且需要一些必要的逻辑代码才能实现，这种情况下，便加入了一个中介者来实现，也就是一个上帝类，可以获取到所有模块的事件和方法，以此来实现对应的功能。</p>
<p>总结：由于最近一年的工作以<code>sdk</code>的的功能开发为主，这些设计模式多多少少都有了一些应用，有些是随着项目的不断壮大和复杂，自己想出来的一些优化方案，后来看了这篇课程之后，发现自己的有些实现很切合这其中的某一个设计模式，看完课程之后，又对项目进行了一些局部重构，更规范的来运用这些设计模式。</p>
<p>下面是总结的课程中的一些代码质量上的规范</p>
<h3 id="快速改善代码质量的编程规范"><a href="#快速改善代码质量的编程规范" class="headerlink" title="快速改善代码质量的编程规范"></a>快速改善代码质量的编程规范</h3><h4 id="命名长度"><a href="#命名长度" class="headerlink" title="命名长度"></a>命名长度</h4><p>对于一些默认的，大家熟知的词，采用缩写，作用域较小的变量，采用短一点的命名，相对类名这种的可以长一些</p>
<h4 id="通过上下文简化命名"><a href="#通过上下文简化命名" class="headerlink" title="通过上下文简化命名"></a>通过上下文简化命名</h4><p>一个例子就能明白</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.getName(); <span class="comment">// 借助user对象这个上下文</span></span><br></pre></td></tr></table></figure>
<h4 id="命名要可读，可搜索"><a href="#命名要可读，可搜索" class="headerlink" title="命名要可读，可搜索"></a>命名要可读，可搜索</h4><p>不用是使用生僻词，可搜索体现在 <code>getXXX</code>、<code>selectXXX</code> 这种带有可搜索前缀的命名上</p>
<h4 id="命名接口"><a href="#命名接口" class="headerlink" title="命名接口"></a>命名接口</h4><p>接口一般可以加前缀 <code>I</code>，表示 <code>Interface</code>，或者添加后缀<code>Impl</code></p>
<h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><p>注：这个我一般使用 vscode 的 <code>document.this</code></p>
<h4 id="类、函数多大才合适"><a href="#类、函数多大才合适" class="headerlink" title="类、函数多大才合适"></a>类、函数多大才合适</h4><p>函数尽量不要超过一屏，类能做到内部接口清晰可寻</p>
<h4 id="一行代码多少最合适"><a href="#一行代码多少最合适" class="headerlink" title="一行代码多少最合适"></a>一行代码多少最合适</h4><p>尽量不要超过编辑器显示的宽度</p>
<h4 id="善用空行分割单元快、四格缩进还是两格缩进、大括号是否要另起一行"><a href="#善用空行分割单元快、四格缩进还是两格缩进、大括号是否要另起一行" class="headerlink" title="善用空行分割单元快、四格缩进还是两格缩进、大括号是否要另起一行"></a>善用空行分割单元快、四格缩进还是两格缩进、大括号是否要另起一行</h4><p>注：此处我一般使用编辑器自带格式化工具</p>
<h4 id="将代码分割成更小的单元快"><a href="#将代码分割成更小的单元快" class="headerlink" title="将代码分割成更小的单元快"></a>将代码分割成更小的单元快</h4><p>只有在代码逻辑比较复杂的时候，才建议提炼类或者函数</p>
<h4 id="避免参数过多"><a href="#避免参数过多" class="headerlink" title="避免参数过多"></a>避免参数过多</h4><p>函数参数多于 5个是，会影响到代码可读性，看是否能通过拆分多个函数来减少参数，或者将参数封装成对象</p>
<h4 id="勿用函数参数来控制逻辑"><a href="#勿用函数参数来控制逻辑" class="headerlink" title="勿用函数参数来控制逻辑"></a>勿用函数参数来控制逻辑</h4><p>不要在函数中使用布尔类型的参数类控制内部逻辑</p>
<h4 id="函数设计要职责单一"><a href="#函数设计要职责单一" class="headerlink" title="函数设计要职责单一"></a>函数设计要职责单一</h4><p>要符合单一职责原则</p>
<h4 id="移除过深的嵌套层次"><a href="#移除过深的嵌套层次" class="headerlink" title="移除过深的嵌套层次"></a>移除过深的嵌套层次</h4><p><code>if-else</code>、<code>switch-case</code>、<code>for</code> 的嵌套最好不要超过两层，一般有如下解决方法</p>
<ul>
<li>去除多余的 <code>if</code> 或者 <code>else</code> 语句</li>
<li>使用编程语言提供的 <code>continue</code>、<code>break</code>、<code>return</code> 关键字，提前退出嵌套</li>
<li>调整执行顺序减少嵌套。</li>
<li>将部分嵌套封装成函数调用，以此来减少嵌套</li>
</ul>
<h4 id="学会使用解释性变量"><a href="#学会使用解释性变量" class="headerlink" title="学会使用解释性变量"></a>学会使用解释性变量</h4><ul>
<li>使用常量取代魔法数字，比如圆周率 <code>3.1415</code>，可以使用 <code>PI</code> 变量来承接一下</li>
<li>使用解释性变量来解释复杂表达式。例子如下</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (date.after(SUMMER_START) &amp;&amp; date.before(SUMMER_END)) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入解释性变量后逻辑更加清晰</span></span><br><span class="line"><span class="keyword">const</span> isSummer = date.after(SUMMER_START)&amp;&amp;date.before(SUMMER_END);</span><br><span class="line"><span class="keyword">if</span> (isSummer) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack -ts</title>
    <url>/2019/02/22/%E6%A8%A1%E5%9D%97%E6%89%93%E5%8C%85/webpack01/</url>
    <content><![CDATA[<p>最近遇到一个需要将 ts 文件打包成 js 的小问题，打包工具有很多，就我所知道的就有<code>gulp</code>、<code>rollup</code>、<code>webpack</code>，下面就大致说说我是如何通过阅读文档从零搭建一个简单的打包配置的。</p>
<h2 id="安装-npm-包"><a href="#安装-npm-包" class="headerlink" title="安装 npm 包"></a>安装 npm 包</h2><p>按照模块功能才划分，可以分为下面几组：</p>
<ol>
<li>webpack：<code>webpack</code>、<code>webpack-cli</code>、<code>@types/webpack</code></li>
<li>typescript：<code>typescript</code>、<code>ts-node</code>、<code>ts-loader</code>、<code>@types/node</code></li>
<li>babel：<code>babel-core</code>、<code>babel-loader</code>、<code>babel-preset-env</code></li>
<li>plugin：<code>clean-webpack-plugin</code>、<code>uglifyjs-webpack-plugin</code></li>
</ol>
<p>1 是 webpck 的核心文件和 cli 工具以及类型声明，2 是 ts 编译器和加载器，3 是 babel 核心文件，4 是 webpack 清理打包文件夹以及代码压缩插件</p>
<h2 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h2><p>下面是具体配置代码，这里是只定义了生产环境。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="comment">// 标识是生产环境还是开发环境，或者都不是</span></span><br><span class="line">  mode: <span class="string">'production'</span>,</span><br><span class="line">  <span class="comment">// 入口文件设置</span></span><br><span class="line">  entry: &#123;</span><br><span class="line">    modelTool: <span class="string">'./src/modelTool.ts'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 控制是否生成source map来增强调试</span></span><br><span class="line">  devtool: <span class="string">'none'</span>,</span><br><span class="line">  <span class="comment">// 是否失败之后中断并抛出错误</span></span><br><span class="line">  bail: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 打包输出设置</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].min.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    <span class="comment">// var 变量名</span></span><br><span class="line">    library: <span class="string">'ModelTool'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    <span class="comment">// 自动解析确定的扩展</span></span><br><span class="line">    extensions: [<span class="string">'.ts'</span>, <span class="string">'.js'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">module</span>: &#123;</span><br><span class="line">    <span class="comment">// ts配置</span></span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.ts?$/</span>,</span><br><span class="line">        use: <span class="string">'ts-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// babel配置</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">'@babel/preset-env'</span>],</span><br><span class="line">            plugins: [<span class="string">'@babel/transform-runtime'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 清理dist文件夹</span></span><br><span class="line">  plugins: [<span class="keyword">new</span> CleanWebpackPlugin(<span class="string">'dist/*'</span>)],</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    <span class="comment">// 使用uglifyjs压缩js体积</span></span><br><span class="line">    minimizer: [<span class="keyword">new</span> UglifyJsPlugin()]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure>

<h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>在<code>package.json</code>中加入如下快捷启动方式，<code>watch</code>用来监听文件变化，build 用来打包</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"watch"</span>: <span class="string">"webpack --watch --progress"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack --config webpack.config.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="rollup"><a href="#rollup" class="headerlink" title="rollup"></a>rollup</h2><p>另外我也用尝试着使用 rollup 进行对比，rollup 比起 webpack 较为简单，打包速度也比较快，大致配置如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> babel <span class="keyword">from</span> <span class="string">'rollup-plugin-babel'</span></span><br><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">'rollup-plugin-node-resolve'</span></span><br><span class="line"><span class="keyword">import</span> typescript <span class="keyword">from</span> <span class="string">'rollup-plugin-typescript'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> license = <span class="string">`/*!</span></span><br><span class="line"><span class="string"> * Released under the MIT License.</span></span><br><span class="line"><span class="string"> */`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  input: <span class="string">'src/modelTool.ts'</span>,</span><br><span class="line">  output: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 输出js格式</span></span><br><span class="line">      format: <span class="string">'umd'</span>,</span><br><span class="line">      <span class="comment">// 全局变量名</span></span><br><span class="line">      name: <span class="string">'ModelTool'</span>,</span><br><span class="line">      <span class="comment">// 输出文件地址</span></span><br><span class="line">      file: <span class="string">'dist/xx.js'</span>,</span><br><span class="line">      <span class="comment">// 输出文件首行显示文字</span></span><br><span class="line">      banner: license,</span><br><span class="line">      <span class="comment">// 全局变量与external映射</span></span><br><span class="line">      globals: &#123;</span><br><span class="line">        lodash: <span class="string">'_'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      format: <span class="string">'es'</span>,</span><br><span class="line">      file: <span class="string">'dist/xx.module.js'</span>,</span><br><span class="line">      banner: license,</span><br><span class="line">      globals: &#123;</span><br><span class="line">        lodash: <span class="string">'_'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  plugins: [</span><br><span class="line">    resolve(&#123;</span><br><span class="line">      <span class="comment">// 将自定义选项传递给解析插件</span></span><br><span class="line">      customResolveOptions: &#123;</span><br><span class="line">        moduleDirectory: <span class="string">'node_modules'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// babel插件</span></span><br><span class="line">    babel(),</span><br><span class="line">    <span class="comment">// ts插件</span></span><br><span class="line">    typescript(&#123; <span class="attr">lib</span>: [<span class="string">'es5'</span>, <span class="string">'es6'</span>, <span class="string">'dom'</span>], <span class="attr">target</span>: <span class="string">'es5'</span> &#125;)</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 外部依赖的名称</span></span><br><span class="line">  external: [<span class="string">'lodash'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>babel 在 <code>package.json</code> 中的配置</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"babel"</span>: &#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">"@babel/preset-env"</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"useBuiltIns"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当前官方提供的 ts 插件<code>rollup-plugin-typescript</code>不会做类型检查以及<code>threejs</code>的一些插件引用问题，故而没有采用 rollup</p>
<p>rollup 打包出来的文件默认是未压缩的，这里采用的是 <code>terser</code>进行的压缩，只需在 <code>package.josn</code> 中进行如下设置即可：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"rollup --config &amp;&amp; terser dist/xxx.js -o dist/xxx.min.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>webpack</tag>
        <tag>rollup</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack -git</title>
    <url>/2019/02/23/%E6%A8%A1%E5%9D%97%E6%89%93%E5%8C%85/webpack02/</url>
    <content><![CDATA[<p>继上次 webpack 打包配置完成之后，后续针对使用过程中遇到的问题又进行了些许修改</p>
<p>因为此次工作的目标是在 git 上发布，所以一个工具使用的例子就必不可少了，经过几次修改后，文件夹结构如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">project</span><br><span class="line">├── dist</span><br><span class="line">|   ├── xx.js</span><br><span class="line">|   └── xx.min.js</span><br><span class="line">├── example</span><br><span class="line">|   ├── css</span><br><span class="line">|   ├── js</span><br><span class="line">|   └── *.html</span><br><span class="line">├── src</span><br><span class="line">|   └── *.ts</span><br><span class="line">├── package.json</span><br><span class="line">├── tsconfig.json</span><br><span class="line">├── webpack.dev.js</span><br><span class="line">└── webpack.prod.js</span><br></pre></td></tr></table></figure>

<p><code>dist</code>用来存放打包之后的文件，<code>example</code>是使用样例，<code>src</code>是工具源码，<code>webpack.dev.js</code>开发配置，<code>webpack.prod.js</code>生成配置</p>
<p>首先是<code>example</code>文件夹下都是一些简单的<code>html</code>文件，其会直接引用<code>dist</code>文件夹生成的代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../dist/xx.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>两个 webpack 配置基本一致，下面是<code>webpack.dev.js</code>的配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    modelTool: <span class="string">'./src/index.ts'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devtool: <span class="string">'source-map'</span>,</span><br><span class="line">  bail: <span class="literal">true</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    libraryTarget: <span class="string">'this'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.ts'</span>, <span class="string">'.js'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.ts?$/</span>,</span><br><span class="line">        use: <span class="string">'ts-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">'@babel/preset-env'</span>],</span><br><span class="line">            plugins: [<span class="string">'@babel/transform-runtime'</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist/modelTool.js'</span>, <span class="string">'dist/modelTool.js.map'</span>])</span><br><span class="line">  ],</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    minimizer: [<span class="keyword">new</span> UglifyJsPlugin()]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config</span><br></pre></td></tr></table></figure>

<p><code>webpack.prod.js</code> 不同点在于 <code>mode</code>为<code>production</code>，<code>devtool</code>为<code>none</code>，<code>output</code>中的<code>filename</code>为<code>[name].min.js</code>，其他的都是一致的。</p>
<p>添加 example 的目的一是可以在开发的时候测一下功能是否正常，二是传到 git 上后可以作为使用示例。</p>
]]></content>
      <categories>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
</search>
